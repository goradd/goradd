# This docker-compose file is an example of how you could deploy the app
# on a linux server where the app is behind an Apache web server.
# Similar configurations can be achieved for Nginx or other web servers.
# This particular example shows the following:
# 1) The Apache server has been setup with a reverse proxies that maps the
#    "/myapp" directory to the application, so that whenever a user goes to
#    /myapp or a subdirectory, they are actually sent to the goradd app.
#    To do this, you would add the following directories to the Apache configuration
#    file for the server or virtual server. Note that you can do this for a secure
#    https: address too, and internally traffic will be automatically sent to the goradd
#    app without encryption, so that all your encryption and certificate stuff is handled
#    by Apache and the goradd app doesn't even need to know.
#    ProxyPass /myapp/ http://0.0.0.0:8123/
#    ProxyPassReverse /myapp/ http://0.0.0.0:8123/
# 2) To support websockets, including the Watcher mechanism, the following Apache configuration
#    settings route websocket traffic to the /ws/ directory in the goradd app in the docker container.
#    You also need to turn on the proxy_wstunnel Apache module.
#    ProxyPass /myapp/ws/ ws://0.0.0.0:8123/ws/
#    ProxyPassReverse /myapp/ws/ ws://0.0.0.0:8123/ws/
# 3) The docker container maps goradd's internal webserver port of 80 to the 8123 port specified in the
#    Apache config file.
# 4) The proxyPath option specifies /myapp as the subdirectory for the app. This is important
#    so that the app can generate html links to its images, css, javascript and other asset
#    files using a path that will direct these requests through the app.
# 5) The db.cfg file should include a "net" value of "unix" to tell the app to use
#    a unix socket to connect to the database. This is generally faster and safer than
#    connecting over tcp.
# 6) volumes parameter below maps the host's unix socket to the place internally that is
#    the default location that GO's mysql driver looks for the socket.
version: '3.8'
services:
  app:
    container_name: grapp
    image: grapp

    # This maps the internal webserver port to the hosts 8123 port. You can specify
    # whatever port you want.
    ports:
      - "8123:80"
    restart: always
    # Use a database config file and specify "/myapp" is the subdirectory of the app
    command: -proxyPath /myapp -dbConfigFile db.cfg
    volumes:
      - ./db.cfg:/app/db.cfg # map the config file outside the container to the right location inside the container
      - /var/run/mysqld/mysqld.sock:/tmp/mysql.sock # map the unix socket to GO's default location