var nodeName = tt.GoName + "Node"

{{
// Code generated by goradd. DO NOT EDIT.

package node

import (
    "encoding/gob"
	"github.com/goradd/goradd/pkg/orm/query"
)

type {{nodeName}} struct {
	query.ReferenceNodeI
}

// SelectNodes_ is used internally by the framework to return the list of column nodes.
// doc: hide
func (n *{{nodeName}}) SelectNodes_() (nodes []*query.ColumnNode) {
}}

i := 0
fn := tt.FieldGoName(i)
for fn != "" {
{{
	nodes = append(nodes, n.{{= fn }}())
}}
    i++
	fn = tt.FieldGoName(i)
}
{{
	return nodes
}

// PrimaryKeyNode returns a node representing the primary key column.
func (n *{{nodeName}}) PrimaryKeyNode() (*query.ColumnNode) {
	return n.{{= tt.PkField }}()
}

// EmbeddedNode_ is used internally by the framework to return the embedded ReferenceNodeI.
// doc: hide
func (n *{{nodeName}}) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}

// Copy_ is used internally by the framework to deep copy the node.
// doc: hide
func (n *{{nodeName}}) Copy_() query.NodeI {
	return &{{nodeName}}{query.CopyNode(n.ReferenceNodeI)}
}

}}

i = 0
fn = tt.FieldGoName(i)
ft := tt.FieldGoColumnType(i).String()

for fn != "" {
{{
func (n *{{nodeName}}) {{= fn }}() *query.ColumnNode {

	cn := query.NewColumnNode (
		"{{= tt.DbKey }}",
		"{{= tt.DbName }}",
		"{{= tt.FieldNames[i] }}",
		"{{= fn }}",
		query.{{= ft }},
		{{if tt.PkField == fn }}true{{else}}false{{if}},
	)
	query.SetParentNode(cn, n)
	return cn
}
}}
	i++
	fn = tt.FieldGoName(i)
	ft = tt.FieldGoColumnType(i).String()
}

{{
func init() {
{{if generator.BuildingExamples}}
   gob.RegisterName("{{nodeName}}2", &{{nodeName}}{})
{{else}}
   gob.Register(&{{nodeName}}{})
{{if}}
}
}}