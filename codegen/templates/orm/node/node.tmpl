// The master template for the nodes for a particular column.

// ToDo: Move the node creation routines to the database driver, so that nodes can generate their own database code.

var privateName string

privateName = strings.ToLower(t.GoName[:1]) + t.GoName[1:]
{{
// Code generated by goradd. DO NOT EDIT.

package node


import (
    "bytes"
    "encoding/gob"
	"github.com/goradd/goradd/pkg/orm/query"
)
}}

{{
type {{privateName}}Node struct {
	query.ReferenceNodeI
}

// {{= t.GoName }} represents a database table object in queries.
// Use the functions here to create node chains that link tables and columns together for queries.
func {{= t.GoName }}() *{{privateName}}Node {
	n := {{privateName}}Node {
		query.NewTableNode("{{= t.DbKey }}", "{{= t.DbName }}",  "{{= t.GoName }}"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

}}

{{
func (n *{{privateName}}Node) SelectNodes_() (nodes []*query.ColumnNode) {
}}

for _,col := range t.Columns {

{{
	nodes = append(nodes, n.{{col.GoName}}())
}}

}

{{
	return nodes
}
}}

{{
func (n *{{privateName}}Node) PrimaryKeyNode() (*query.ColumnNode) {
}}

for _,col := range t.Columns {
	if col.IsPk {
{{
	return n.{{col.GoName}}()
}}
		break
	}
}

{{
}
}}

{{
func (n *{{privateName}}Node) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
}}

{{
func (n *{{privateName}}Node) Copy_() query.NodeI {
	return &{{privateName}}Node{query.CopyNode(n.ReferenceNodeI)}
}
}}

{{: column.tmpl }}

{{

type {{privateName}}NodeEncoded struct {
	RefNode query.ReferenceNodeI
}

func (n *{{= privateName }}Node) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	s := {{privateName}}NodeEncoded {
		RefNode: n.ReferenceNodeI,
	}

	if err = e.Encode(s); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}


func (n *{{= privateName }}Node) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	var s {{privateName}}NodeEncoded
	if err = dec.Decode(&s); err != nil {
		panic(err)
	}
	n.ReferenceNodeI = s.RefNode
	query.SetParentNode(n, query.ParentNode(n)) // Reinforce types
	return
}

func init() {
{{if generator.BuildingExamples}}
    gob.RegisterName("{{= privateName}}Node2", &{{privateName}}Node{})
{{else}}
    gob.Register(&{{privateName}}Node{})
{{if}}
}
}}