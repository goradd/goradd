// The master template for the nodes for a particular column.

// ToDo: Maybe move the node creation routines to the database driver, so that nodes can generate their own database code.

publicName := t.GoName
privateName := strings.ToLower(t.GoName[:1]) + t.GoName[1:]
{{
// Code generated by GoRADD. DO NOT EDIT.

package node


import (
    "bytes"
    "encoding/gob"
	"github.com/goradd/goradd/pkg/orm/query"
)
}}

{{
// {{publicName}}Node represents the {{t.DbName}} table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node in a query.
//
// To use the {{publicName}}Node, call [{{= t.GoName }}] to start a reference chain when querying the {{t.DbName}} table.
type {{publicName}}Node struct {
    // ReferenceNodeI is an internal object that represents the capabilities of the node. Since it is embedded, all
    // of its functions are exported and are callable along with the {{privateName}}Node functions here.
	query.ReferenceNodeI
}

// {{= t.GoName }} returns a table node that starts a node chain that begins with the {{= t.DbName }} table.
func {{= t.GoName }}() *{{publicName}}Node {
	n := {{publicName}}Node {
		query.NewTableNode("{{= t.DbKey }}", "{{= t.DbName }}",  "{{= t.GoName }}"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

}}

{{
// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
// doc: hide
func (n *{{publicName}}Node) SelectNodes_() (nodes []*query.ColumnNode) {
}}

for _,col := range t.Columns {

{{
	nodes = append(nodes, n.{{col.GoName}}())
}}

}

{{
	return nodes
}
}}

{{
// PrimaryKeyNode returns a node that points to the primary key column.
func (n *{{publicName}}Node) PrimaryKeyNode() (*query.ColumnNode) {
}}

for _,col := range t.Columns {
	if col.IsPk {
{{
	return n.{{col.GoName}}()
}}
		break
	}
}

{{
}
}}

{{
// EmbeddedNode is used internally by the framework to return the embedded Reference node.
// doc: hide
func (n *{{publicName}}Node) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
}}

{{
// Copy_ is used internally by the framework to deep copy the node.
// doc: hide
func (n *{{publicName}}Node) Copy_() query.NodeI {
	return &{{publicName}}Node{query.CopyNode(n.ReferenceNodeI)}
}
}}

{{: column.tmpl }}

{{

type {{privateName}}NodeEncoded struct {
	RefNode query.ReferenceNodeI
}

// GobEncode makes the node serializable.
// doc:hide
func (n *{{= publicName }}Node) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	s := {{privateName}}NodeEncoded {
		RefNode: n.ReferenceNodeI,
	}

	if err = e.Encode(s); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

// GobDecode makes the node deserializable.
// doc: hide
func (n *{{= publicName }}Node) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	var s {{privateName}}NodeEncoded
	if err = dec.Decode(&s); err != nil {
		panic(err)
	}
	n.ReferenceNodeI = s.RefNode
	query.SetParentNode(n, query.ParentNode(n)) // Reinforce types
	return
}

func init() {
{{if generator.BuildingExamples}}
    gob.RegisterName("{{= publicName}}Node2", &{{publicName}}Node{})
{{else}}
    gob.Register(&{{publicName}}Node{})
{{if}}
}
}}