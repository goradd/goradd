dbKey := t.DbKey
tableName := t.DbName

for _,col := range t.Columns {
{{
// {{= col.GoName }} represents the {{= col.DbName }} column in the database.
func (n *{{publicName}}Node) {{= col.GoName }}() *query.ColumnNode {
	cn := query.NewColumnNode (
		"{{= dbKey }}",
		"{{= tableName }}",
		"{{= col.DbName }}",
		"{{= col.GoName }}",
		query.{{= col.ColumnType.String() }},
		{{if col.IsPk}}true{{else}}false{{if}},
	)
	query.SetParentNode(cn, n)
	return cn
}

}}

	if col.ForeignKey != nil {
		isEnum := dd.IsEnumTable(col.ForeignKey.ReferencedTable)
		var objName string

		if isEnum {
			objName = dd.EnumTable(col.ForeignKey.ReferencedTable).GoName
		} else {
			objName = dd.Table(col.ForeignKey.ReferencedTable).GoName
		}
{{

// {{= col.ForeignKey.GoName }} represents the link to the {{= col.ForeignKey.GoName }} object.
func (n *{{publicName}}Node) {{= col.ForeignKey.GoName }}() *{{= objName }}Node {
	cn := &{{= objName }}Node {
		query.NewReferenceNode (
			"{{= dbKey }}",
			"{{= tableName }}",
			"{{= col.DbName }}",
			"{{= col.GoName }}",
			"{{= col.ForeignKey.GoName }}",
			"{{= col.ForeignKey.ReferencedTable }}",
			"{{= col.ForeignKey.ReferencedColumn }}",
			{{b isEnum }},
			query.{{= col.ColumnType.String() }},
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

}}

	}
}


for _,ref := range t.ManyManyReferences {
    pk := ref.PrimaryKey()
    nodeName := ref.ObjectType()

{{

// {{= ref.GoPlural }} represents the many-to-many relationship formed by the {{= ref.AssnTableName }} table.
func (n *{{publicName}}Node) {{= ref.GoPlural }}() *{{= nodeName }}Node  {
	cn := &{{= nodeName }}Node {
		query.NewManyManyNode (
			"{{= t.DbKey }}",
			"{{= ref.AssnTableName }}",
			"{{= ref.AssnSourceColumnName }}",
			"{{= ref.GoPlural }}",
			"{{= ref.DestinationTableName }}",
			"{{= ref.AssnDestColumnName }}",
			"{{= pk }}",
			{{b ref.IsEnumAssociation }},
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

}}

}

for _,ref2 := range t.ReverseReferences {
	assnTable := ref2.AssociatedTable

	if ref2.IsUnique() {

{{
// {{= ref2.GoName }} represents the one-to-one relationship formed by the reverse reference from the
// {{= ref2.DbColumn }} column in the {{= t.DbName }} table.
func (n *{{publicName}}Node) {{= ref2.GoName }}() *{{= assnTable.GoName }}Node  {

	cn := &{{= assnTable.GoName }}Node {
		query.NewReverseReferenceNode (
			"{{= t.DbKey }}",
			"{{= t.DbName }}",
			"{{= t.PrimaryKeyColumn().DbName }}",
			"{{= ref2.DbColumn }}",
			"{{= ref2.GoName }}",
			"{{= ref2.AssociatedTableName() }}",
			"{{= ref2.AssociatedColumn.DbName }}",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

}}

	} else {
{{

// {{= ref2.GoPlural }} represents the many-to-one relationship formed by the reverse reference from the
// {{= ref2.DbColumn }} column in the {{= t.DbName }} table.
func (n *{{publicName}}Node) {{= ref2.GoPlural }}() *{{= assnTable.GoName }}Node  {

	cn := &{{= assnTable.GoName }}Node {
		query.NewReverseReferenceNode (
			"{{= t.DbKey }}",
			"{{= t.DbName }}",
			"{{= t.PrimaryKeyColumn().DbName }}",
			"{{= ref2.DbColumn }}",
			"{{= ref2.GoPlural }}",
			"{{= ref2.AssociatedTableName() }}",
			"{{= ref2.AssociatedColumn.DbName }}",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

}}

	}
}