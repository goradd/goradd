// The master template for the model classes

{{
package model

// This is the implementation file for the {{= t.GoName }} ORM object.
// This is where you build the api to your data model for your web application and potentially mobile apps.
// Your edits to this file will be preserved.

import (
    "fmt"
    "context"
)

// {{= t.GoName }} represents an item in the {{= t.DbName }} table in the database.
type {{= t.GoName }} struct {
	{{= strings2.LcFirst(t.GoName) }}Base
}

// New{{= t.GoName }} creates a new {{= t.GoName }} object and initializes it to default values.
func New{{= t.GoName }}() *{{= t.GoName }} {
	o := new({{= t.GoName }})
	o.Initialize()
	return o
}

// Initialize will initialize or re-initialize a {{= t.GoName }} database object to default values.
func (o *{{= t.GoName }}) Initialize() {
	o.{{= strings2.LcFirst(t.GoName) }}Base.Initialize()
    // Add your own initializations here
}

// String implements the Stringer interface and returns the default label for the object as it appears in html lists.
// Typically you would change this to whatever was pertinent to your application.
func (o *{{= t.GoName }}) String() string  {
    if o == nil {
        return ""   // Possibly - Select One -?
    }
{{if col := t.GetColumn("name"); col != nil}}
    return o.{{= col.ModelName()}}
{{else}}
    return fmt.Sprintf("{{= t.GoName }} %v", o.PrimaryKey())
{{if}}
}

{{g builderName := t.GoPlural + "Builder" }}

// Query{{t.GoPlural}} returns a new builder that gives you general purpose access to the {{= t.GoName }} records
// in the database. Its here to give public access to the query builder, but you can remove it if you do not need it.
func Query{{t.GoPlural}}(ctx context.Context) *{{builderName}} {
	return query{{t.GoPlural}}(ctx)
}

// query{{t.GoPlural}} creates a new builder and is the central spot where all queries are directed.
// You can modify this function to enforce restrictions on queries, for example to make sure the user is authorized to
// access the data.
func query{{t.GoPlural}}(ctx context.Context) *{{builderName}} {
	return new{{t.GoName}}Builder(ctx)
}


// Delete{{= t.GoName }} deletes the given record from the database. Note that you can also delete
// loaded {{= t.GoName }} objects by calling Delete on them.
func Delete{{= t.GoName }}(ctx context.Context, pk {{= t.PrimaryKeyColumn().GoType() }}) {
	delete{{= t.GoName }}(ctx, pk)
}

func init() {
{{if generator.BuildingExamples }}
    gob.RegisterName("Example{{= t.GoName }}", new({{= t.GoName }}))
{{else}}
    gob.Register(new({{= t.GoName }}))
{{if}}
}


}}