package template

import (
	"github.com/goradd/goradd/codegen/generator"
	"github.com/goradd/goradd/pkg/config"
	"io"
	"github.com/gedex/inflector"
	"github.com/goradd/goradd/pkg/orm/db"
	"github.com/goradd/goradd/pkg/orm/query"
	"strings"
	"strconv"
)

func init() {
	t := TypeTableTemplate {
		generator.Template {
			Overwrite: true,
		},
	}
	generator.AddTypeTableTemplate(&t)
}

type TypeTableTemplate struct {
	generator.Template
}

func (n *TypeTableTemplate) FileName(key string, tt generator.TypeTableType) string {
    var targetDir string
    if generator.BuildingExamples {
        targetDir = config.GoraddDir() + "/web/examples/gen"
    } else {
        targetDir = config.ProjectDir() + "/gen"
    }
	return targetDir + "/" + key + "/model/" + tt.FileName() + ".base.go"
}

func (n *TypeTableTemplate) GenerateTypeTable(codegen generator.CodeGenerator, dd *db.Model, tt generator.TypeTableType, _w io.Writer) (err error) {
	// privateName := strings.ToLower(t.GoName[:1]) + t.GoName[1:]

	{{: "typeTable/typeTable.tmpl" }}
	return
}

func (n *TypeTableTemplate) Overwrite() bool {
	return n.Template.Overwrite
}
