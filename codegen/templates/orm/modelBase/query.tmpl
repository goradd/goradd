//query.tmpl
// Top level query functions

{{

// Load returns a {{t.GoName}} from the database.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields. Table nodes will
// be considered Join nodes, and column nodes will be Select nodes. See Join() and Select() for more info.
func Load{{= t.GoName }}(ctx context.Context, primaryKey {{= t.PrimaryKeyColumn().ColumnType.GoType() }}, joinOrSelectNodes ...query.NodeI) *{{t.GoName}} {
	return query{{t.GoPlural}}(ctx).Where(Equal(node.{{t.GoName}}().{{t.PrimaryKeyColumn().GoName}}(), primaryKey)).joinOrSelect(joinOrSelectNodes...).Get()
}

{{g
    if t.Indexes != nil {
        for _,idx := range t.Indexes {
            if idx.IsUnique {
{{
// Load{{t.GoName}}By{{for _,col := range idx.Columns}}{{= col.GoName }}{{for}} queries for a single {{t.GoName}} object by the given unique index values.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields. Table nodes will
// be considered Join nodes, and column nodes will be Select nodes. See Join() and Select() for more info.
// If you need a more elaborate query, use Query{{t.GoPlural}}() to start a query builder.
func Load{{t.GoName}}By{{for _,col := range idx.Columns}}{{= col.GoName }}{{for}} (ctx context.Context{{for _,col := range idx.Columns}}, {{= col.ModelName() }} {{if col.IsNullable}}interface{}{{else}}{{= col.ColumnType.GoType() }}{{if}} {{for}}, joinOrSelectNodes ...query.NodeI) *{{t.GoName}} {
    q := query{{t.GoPlural}}(ctx)
{{for _,col := range idx.Columns}}
{{if col.IsNullable}}
        if {{= col.ModelName() }} == nil {
            q = q.Where(IsNull(node.{{= t.GoName}}().{{= col.GoName }}()))
        } else {
            q = q.Where(Equal(node.{{= t.GoName}}().{{= col.GoName }}(), {{= col.ModelName() }}))
        }
{{else}}
        q = q.Where(Equal(node.{{= t.GoName}}().{{= col.GoName }}(), {{= col.ModelName() }}))
{{if}}
{{for}}
        return q.
            joinOrSelect(joinOrSelectNodes...).
            Get()
}

// Has{{t.GoName}}By{{for _,col := range idx.Columns}}{{= col.GoName }}{{for}} returns true if the
// given unique index values exist in the database.
func Has{{t.GoName}}By{{for _,col := range idx.Columns}}{{= col.GoName }}{{for}} (ctx context.Context{{for _,col := range idx.Columns}}, {{= col.ModelName() }} {{if col.IsNullable}}interface{}{{else}}{{= col.ColumnType.GoType() }}{{if}} {{for}}) bool {
    q := query{{t.GoPlural}}(ctx)
{{for _,col := range idx.Columns}}
{{if col.IsNullable}}
        if {{= col.ModelName() }} == nil {
            q = q.Where(IsNull(node.{{= t.GoName}}().{{= col.GoName }}()))
        } else {
            q = q.Where(Equal(node.{{= t.GoName}}().{{= col.GoName }}(), {{= col.ModelName() }}))
        }
{{else}}
        q = q.Where(Equal(node.{{= t.GoName}}().{{= col.GoName }}(), {{= col.ModelName() }}))
{{if}}
{{for}}
        return q.Count(false) == 1
}

}}
            }
        }
    }
}}

}}

