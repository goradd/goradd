//reverseRefAccessors.tmpl
for _,ref := range t.ReverseReferences {
	oName := ref.Values["objName"]
	mName := ref.Values["mapName"]
	associatedGoName := ref.AssociatedGoName()

	if ref.IsUnique() {
{{

// {{ref.GoName}} returns the connected {{ref.GoType}} object, if one was loaded.
// Otherwise, it will return nil.
func (o *{{privateName}}Base) {{= ref.GoName }}() *{{ref.GoType}} {
	if o.{{oName}} == nil {
		return nil
	}
	return o.{{oName}}
}

// Load{{ref.GoName}} returns the connected {{ref.GoType}} object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *{{privateName}}Base) Load{{= ref.GoName }}(ctx context.Context) *{{ref.GoType}} {
	if o.{{oName}} == nil {
		o.{{oName}} = Load{{ref.GoType}}By{{= associatedGoName }}(ctx, o.{{= t.PrimaryKeyColumn().GoName }}())
	}
	return o.{{oName}}
}

// Set{{ref.GoName}} associates the given object with the {{t.GoName}}.
{{if ref.IsNullable() }}
// If it has an item already associated with it,
// the foreign key for that item will be set to null.
{{else}}
// WARNING! If it has an item already associated with it,
// that item will be DELETED since it cannot be null.
{{if}}
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing an item
// that is not currently attached to this {{t.GoName}}.
func (o *{{privateName}}Base) Set{{= ref.GoName }}(obj *{{= ref.GoType }}) {
{{if ref.IsNullable() }}
    if o.{{oName}} != nil && o.{{oName}}.IsDirty() {
        panic("The {{= ref.GoName }} has changed. You must save it first before changing to a different one.")
    }
{{if}}
	o.{{oName}} = obj
	o.{{oName}}IsDirty = true
}


}}
	} else { // Unique

{{
// {{ref.GoName}} returns a single {{ref.GoType}} object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return {{ref.GoType}} objects that are not saved.
func (o *{{privateName}}Base) {{= ref.GoName }}(pk {{= ref.AssociatedPkType() }}) *{{ref.GoType}} {
	if o.{{mName}} == nil {
		return nil
	}
	v,_ := o.{{mName}}[pk]
	return v
}

// {{ref.GoPlural}} returns a slice of {{ref.GoType}} objects if loaded.
func (o *{{privateName}}Base) {{= ref.GoPlural }}() []*{{ref.GoType}} {
	if o.{{oName}} == nil {
		return nil
	}
	return o.{{oName}}
}

// Load{{ref.GoPlural}} loads a new slice of {{ref.GoType}} objects and returns it.
func (o *{{privateName}}Base) Load{{= ref.GoPlural }}(ctx context.Context, conditions ...interface{}) []*{{ref.GoType}} {
	qb := query{{ref.GoTypePlural}}(ctx)
	cond := Equal(node.{{= ref.GoType }}().{{= associatedGoName }}(), o.PrimaryKey())
	if conditions != nil {
		conditions = append(conditions, cond)
	    cond = And(conditions...)
	}

	o.{{oName}} = qb.Where(cond).Load()
	return o.{{oName}}
}

// Count{{ref.GoPlural}} returns the number of {{ref.GoType}} objects in the database connected to this object.
func (o *{{privateName}}Base) Count{{ref.GoPlural}}(ctx context.Context) int {
	return int(Query{{= ref.GoTypePlural }}(ctx).
	    Where(Equal(node.{{= ref.GoType }}().{{= ref.AssociatedColumn.GoName }}(), o.PrimaryKey())).
	    Count(false))
}

// Set{{ref.GoPlural}} associates the given objects with the {{t.GoName}}.
{{if ref.IsNullable() }}
// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those will be set to null.
{{else}}
// WARNING! If it has items already associated with it that will not be associated after a save,
// those items will be DELETED since they cannot be null.
{{if}}
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this {{t.GoName}}.
func (o *{{privateName}}Base) Set{{= ref.GoPlural }}(objs []*{{= ref.GoType }}) {
    for _,obj := range o.{{oName}} {
        if obj.IsDirty() {
            panic("You cannot overwrite items that have changed but have not been saved.")
        }
    }

	o.{{oName}} = objs
	o.{{mName}} = make(map[{{= ref.AssociatedPkType() }}]*{{= ref.GoType }})
	for _,obj := range o.{{oName}} {
	    pk := obj.{{= ref.AssociatedTable.PrimaryKeyColumn().GoName}}()
	    if pk != {{= ref.AssociatedTable.PrimaryKeyColumn().ColumnType.DefaultValue()}} {
	        o.{{mName}}[pk] = obj
	    }
	}
	o.{{oName}}IsDirty = true
}



}}
	}

}
