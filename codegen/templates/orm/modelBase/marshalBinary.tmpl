{{

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *{{privateName}}Base) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

{{for _,col := range t.Columns}}
    if err := encoder.Encode(o.{{= col.ModelName() }}); err != nil {
        return nil, err
    }
{{if col.IsNullable}}
    if err := encoder.Encode(o.{{= col.ModelName() }}IsNull); err != nil {
        return nil, err
    }
{{if}}
    if err := encoder.Encode(o.{{= col.ModelName() }}IsValid); err != nil {
        return nil, err
    }
    if err := encoder.Encode(o.{{= col.ModelName() }}IsDirty); err != nil {
        return nil, err
    }

{{if col.IsReference() }}
    if o.{{= oRef(col) }} == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(o.{{= oRef(col) }}); err != nil {
            return nil, err
        }
    }
{{if}}
{{for}}

{{for _,ref := range t.ReverseReferences}}
{{if ref.IsUnique() }}
    if o.{{= objectPrefix }}{{= ref.GoName }} == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(o.{{= objectPrefix}}{{= ref.GoName }}); err != nil {
            return nil, err
        }
    }

    if err := encoder.Encode(o.{{= objectPrefix}}{{= ref.GoName }}PK != nil); err != nil {
        return nil, err
    }
    if o.{{= objectPrefix}}{{= ref.GoName }}PK != nil {
        if err := encoder.Encode(*o.{{= objectPrefix}}{{= ref.GoName }}PK); err != nil {
            return nil, err
        }
    }


    if err := encoder.Encode(o.{{= objectPrefix }}{{= ref.GoName }}IsDirty); err != nil {
        return nil, err
    }


{{else}}
    if o.{{= objectPrefix}}{{= ref.GoPlural }} == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(o.{{= objectPrefix}}{{= ref.GoPlural }}); err != nil {
            return nil, err
        }
    }
    if err := encoder.Encode(o.s{{= ref.GoPlural }}PKs != nil); err != nil {
        return nil, err
    }
    if o.s{{= ref.GoPlural }}PKs != nil {
        if err := encoder.Encode(o.s{{= ref.GoPlural }}PKs); err != nil {
            return nil, err
        }
    }

    if err := encoder.Encode(o.{{= objectPrefix }}{{= ref.GoPlural }}IsDirty); err != nil {
        return nil, err
    }

{{# We will need to rebuild the map based on the object decoded, since they are pointers to the same objects}}
{{if}}
{{for}}

{{for _,ref := range t.ManyManyReferences}}
    if o.{{= objectPrefix}}{{= ref.GoPlural }} == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(o.{{= objectPrefix}}{{= ref.GoPlural }}); err != nil {
            return nil, err
        }
    }
    if err := encoder.Encode(o.{{= objectPrefix}}{{= ref.GoPlural }}IsDirty); err != nil {
        return nil, err
    }
{{if !ref.IsEnumAssociation }}
    if err := encoder.Encode(o.s{{= ref.GoPlural }}PKs != nil); err != nil {
        return nil, err
    }
    if o.s{{= ref.GoPlural }}PKs != nil {
        if err := encoder.Encode(o.s{{= ref.GoPlural }}PKs); err != nil {
            return nil, err
        }
    }
{{if}}

{{# We will need to rebuild the map (when not a enum table association) based on the object decoded, since they are pointers to the same objects}}
{{for}}

    if o._aliases == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(o._aliases); err != nil {
            return nil, err
        }
    }

    if err := encoder.Encode(o._restored); err != nil {
        return nil, err
    }
    if err := encoder.Encode(o._originalPK); err != nil {
        return nil, err
    }

    return buf.Bytes(), nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a {{= t.GoName }} object.
func (o *{{privateName}}Base) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr

{{for _,col := range t.Columns}}
    if err = dec.Decode(&o.{{= col.ModelName() }}); err != nil {
        return
    }
{{if col.IsNullable}}
    if err = dec.Decode(&o.{{= col.ModelName() }}IsNull); err != nil {
        return
    }
{{if}}
    if err = dec.Decode(&o.{{= col.ModelName() }}IsValid); err != nil {
        return
    }
    if err = dec.Decode(&o.{{= col.ModelName() }}IsDirty); err != nil {
        return
    }

{{if col.IsReference()}}
    if err = dec.Decode(&isPtr); err != nil {
        return
    }
    if isPtr {
        if err = dec.Decode(&o.{{= oRef(col) }}); err != nil {
            return
        }
    }
{{if}}
{{for}}

{{for _,ref := range t.ReverseReferences}}
{{if ref.IsUnique() }}
    if err = dec.Decode(&isPtr); err != nil {
        return
    }
    if isPtr {
        if err = dec.Decode(&o.{{= objectPrefix}}{{= ref.GoName }}); err != nil {
            return
        }
    }

    if err = dec.Decode(&isPtr); err != nil {
        return
    }
    if isPtr {
        o.{{= objectPrefix}}{{= ref.GoName }}PK = new ({{= ref.PrimaryKeyType() }})
        if err = dec.Decode(o.{{= objectPrefix}}{{= ref.GoName }}PK); err != nil {
            return
        }
    }

    if err = dec.Decode(&o.{{= objectPrefix }}{{= ref.GoName }}IsDirty); err != nil {
        return
    }

{{else}}
    if err = dec.Decode(&isPtr); err != nil {
        return
    }
    if isPtr {
        if err = dec.Decode(&o.{{= objectPrefix }}{{= ref.GoPlural }}); err != nil {
            return
        }
        if len(o.{{= objectPrefix}}{{= ref.GoPlural }}) > 0 {
            o.m{{= ref.GoPlural }} = make(map[{{= ref.PrimaryKeyType() }}] *{{= ref.GoType }})
            for _,p := range o.{{= objectPrefix }}{{= ref.GoPlural }} {
                o.m{{= ref.GoPlural }}[p.PrimaryKey()] = p
            }
        }
    }

    if err = dec.Decode(&isPtr); err != nil {
        return
    }
    if isPtr {
        if err = dec.Decode(&o.s{{= ref.GoPlural }}PKs); err != nil {
            return
        }
    }

    if err = dec.Decode(&o.{{= objectPrefix }}{{= ref.GoPlural }}IsDirty); err != nil {
        return
    }

{{if}}
{{for}}

{{for _,ref := range t.ManyManyReferences}}
    if err = dec.Decode(&isPtr); err != nil {
        return
    }
    if isPtr {
        if err = dec.Decode(&o.{{= objectPrefix}}{{ref.GoPlural}}); err != nil {
            return
        }
{{if !ref.IsEnumAssociation}}
        if len(o.{{= objectPrefix}}{{= ref.GoPlural }}) > 0 {
            o.m{{= ref.GoPlural }} = make(map[{{= ref.PrimaryKeyType() }}] *{{= ref.ObjectType() }})

            for _,p := range o.{{= objectPrefix }}{{= ref.GoPlural }} {
                o.m{{= ref.GoPlural }}[p.PrimaryKey()] = p
            }
        }
{{if}}
    }
    if err = dec.Decode(&o.{{= objectPrefix}}{{= ref.GoPlural }}IsDirty); err != nil {
        return
    }
{{if !ref.IsEnumAssociation}}
    if err = dec.Decode(&isPtr); err != nil {
        return
    }
    if isPtr {
        if err = dec.Decode(&o.s{{= ref.GoPlural}}PKs); err != nil {
            return
        }
    }
{{if}}


{{for}}

    if err = dec.Decode(&isPtr); err != nil {
        return
    }
    if isPtr {
        if err = dec.Decode(&o._aliases); err != nil {
            return
        }
    }

    if err = dec.Decode(&o._restored); err != nil {
        return
    }
    if err = dec.Decode(&o._originalPK); err != nil {
        return
    }


	return
}

}}
