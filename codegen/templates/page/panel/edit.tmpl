//edit.tmpl

// The master template for the EditPanel classes

var panelName = t.GoName + "EditPanel"

{{

package form

// This file is generated by goradd. DO NOT EDIT. Your changes will be lost.
// To use this file, copy it to your goradd-project/web/panel directory and modify it there.

import(
	"github.com/goradd/goradd/pkg/page"
	"github.com/goradd/goradd/pkg/page/control"
	"context"
	"goradd-project/gen/{{dd.DbKey}}/connector"
	"goradd-project/gen/{{dd.DbKey}}/model"
	"goradd-project/gen/{{dd.DbKey}}/panelbase"
)

// {{= panelName }} is a panel of editable controls that will edit a {{= t.GoName }} object.
type {{= panelName }} struct {
	panelbase.{{= panelName }}Base
}

// New{{= panelName }} creates a new edit panel for {{= t.GoName }} objects.
func New{{= panelName }}(ctx context.Context, parent page.ControlI, id string) *{{= panelName}} {
    p := new({{= panelName }})
    p.Self = p
	p.Init(ctx, parent, id)
	return p
}

// Init initializes a panel and should be called by derived panels.
func (p *{{= panelName }}) Init(ctx context.Context, parent page.ControlI, id string) {
	p.{{= panelName }}Base.Init(parent, id)
	p.CreateControls(ctx)
}

{{: editCreateControls.tmpl }}

// Load puts data from the database into the edit panel. pk is the primary key of a model.{{= t.GoName }}
// database record in string format
func (p *{{= panelName }}) Load(ctx context.Context, pk string) (err error) {
{{if t.PrimaryKeyColumn().ColumnType == query.ColTypeString }}
    if err = p.{{= panelName }}Base.Load(ctx, pk); err != nil {
        return err
    }
{{else}}
    // convert from string to pk type
    pk2 := query.{{= t.PrimaryKeyColumn().ColumnType.String() }}.FromString(pk).({{= t.PrimaryKeyGoType() }})
    if err = p.{{= panelName }}Base.Load(ctx, pk2); err != nil {
        return err
    }
{{if}}
    // Add additional items to load here

    return
}


// Validate validates the controls in the panel
func (p *{{= panelName }}) Validate(ctx context.Context) bool {
	isValid := p.{{= panelName }}Base.Validate(ctx)

	// add other validations here

    return isValid
}


// Refresh loads the controls with data from the cached model.{{= t.GoName }} object.
func (p *{{= panelName }}) Refresh() {
    p.{{= panelName }}Base.Refresh()
}


// Reload loads the controls with data found in the database, over-writing any changes made to the internal data object.
func (p *{{= panelName }}) Reload(ctx context.Context) {
    _ = p.{{= panelName }}Base.Reload(ctx)
}


// Save writes out the data that is currently in the controls
func (p *{{= panelName }}) Save(ctx context.Context) {
    p.{{= panelName }}Base.Save(ctx)
}


// Delete deletes the object currently being edited
func (p *{{= panelName }}) Delete(ctx context.Context) {
    p.{{= panelName }}Base.Delete(ctx)
}

// BindData loads data into controls whose content is dynamically generated.
func (p *{{= panelName }}) BindData(ctx context.Context, s control.DataManagerI) {
    p.{{= panelName }}Base.BindData(ctx, s)
}

/*
If you add additional non-exported members to the struct (as in, their names start with a lower-case letter),
you should serialize them and deserialize them below.
Pointers will need to be checked for nil before serializing.
Errors should panic.

func (p *{{= panelName }}) Serialize(e page.Encoder) {
	p.{{= panelName }}Base.Serialize(e)

    if err := e.Encode(p.myNewMemberVariable); err != nil {
        panic(err)
    }


    if p.mySecondMemberVariablePtr == nil {
        if err := e.Encode(false); err != nil {
            panic(err)
        }
    } else {
        if err := e.Encode(true); err != nil {
            panic(err)
        }
        if err := e.Encode(p.mySecondMemberVariablePtr); err != nil {
            panic(err)
        }
    }
}

func (p *{{= panelName }}) Deserialize(dec page.Decoder) {
	if err := c.{{= panelName }}Base.Deserialize(dec); err != nil {
		panic(err)
	}

	if err := dec.Decode(&p.myNewMemberVariable); err != nil {
		panic(err)
	}

    var isPtr bool
	if err := dec.Decode(&isPtr); err != nil {
		panic(err)
	}
	if isPtr {
        if err := dec.Decode(&p.mySecondMemberVariablePtr); err != nil {
            panic(err)
        }
	}
	return
}
*/


type {{t.GoName}}EditPanelCreator struct {
	ID string
}

func (c {{t.GoName}}EditPanelCreator) Create(ctx context.Context, parent page.ControlI) page.ControlI {
	p := New{{panelName}}(ctx, parent, c.ID)
	return p
}

func Get{{= panelName }}(c page.ControlI, id string) *{{= panelName }} {
	return c.Page().GetControl(id).(*{{= panelName }})
}

func init() {
    page.RegisterControl(&{{= panelName }}{})
}

}}