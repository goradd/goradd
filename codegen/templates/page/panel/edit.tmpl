//edit.tmpl

// The master template for the EditPanel classes

var panelName = t.GoName + "EditPanel"

{{

package panel

// This file is generated by goradd. DO NOT EDIT. Your changes will be lost.
// To use this file, copy it to your goradd-project/web/panel directory and modify it there.

import(
	"github.com/goradd/goradd/pkg/page"
	"github.com/goradd/goradd/pkg/page/control"
	"context"
	"goradd-project/gen/{{dd.DbKey}}/connector"
	"goradd-project/gen/{{dd.DbKey}}/model"
	"goradd-project/gen/{{dd.DbKey}}/panelbase"
)

type {{= panelName }} struct {
	panelbase.{{= panelName }}Base
}

func New{{= panelName }}(ctx context.Context, parent page.ControlI, id string) *{{= panelName}} {
    p := new({{= panelName }})
    p.Self = p
	p.Init(ctx, parent, id)
	return p
}

func (p *{{= panelName }}) Init(ctx context.Context, parent page.ControlI, id string) {
	p.{{= panelName }}Base.Init(parent, id)
	p.CreateControls(ctx)
}

/* Override and call base class, or completely replace as you need
func (p *{{= panelName }}) CreateControls(ctx context.Context) {
    p.{{= panelName }}Base.CreateControls(ctx)
}
*/

/* Override and call base class, or completely replace as you need
// Load loads up the edit panel with data from the database. pk is the primary key of a model.{{= t.GoName }}
// database record
func (p *{{= panelName }}) Load(ctx context.Context, pk string) error {
    return p.{{= panelName }}Base.Load(ctx, pk)
}
*/

/* Override and call base class, or completely replace as you need
// Validate validates the controls in the panel
func (p *{{= panelName }}) Validate(ctx context.Context) bool {
	isValid := p.{{= panelName }}Base.Validate(ctx)

	// add other validations here
    return isValid
}
*/

/* Override and call base class, or completely replace as you need
// Refresh loads the controls with data from the cached model.{{= t.GoName }} object.
func (p *{{= panelName }}) Refresh() {
    p.{{= panelName }}Base.Refresh()
}
*/

/* Override and call base class, or completely replace as you need
// Reload loads the controls with data found in the database, over-writing any changes made to the internal data object.
func (p *{{= panelName }}) Reload(ctx context.Context) {
    p.Load(p.{{= t.GoName }}.PrimaryKey())
}
*/

/* Override and call base class, or completely replace as you need
// Save writes out the data that is currently in the controls
func (p *{{= panelName }}) Save(ctx context.Context) {
    p.{{= panelName }}Base.Save(ctx)
}
*/

/* Override and call base class, or completely replace as you need
// Delete deletes the object currently being edited
func (p *{{= panelName }}) Delete(ctx context.Context) {
    p.{{= panelName }}Base.Delete(ctx)
}
*/

/*
If you add additional members to the struct, you should serialize them and deserialize them below.
Pointers will need to be checked for nil before serializing.
Errors should panic.

func (p *{{= panelName }}) Serialize(e page.Encoder) {
	p.{{= panelName }}Base.Serialize(e)

    if err := e.Encode(p.myNewMemberVariable); err != nil {
        panic(err)
    }


    if p.mySecondMemberVariablePtr == nil {
        if err := e.Encode(false); err != nil {
            panic(err)
        }
    } else {
        if err := e.Encode(true); err != nil {
            panic(err)
        }
        if err := e.Encode(p.mySecondMemberVariablePtr); err != nil {
            panic(err)
        }
    }
}

func (p *{{= panelName }}) Deserialize(dec page.Decoder) {
	if err := c.{{= panelName }}Base.Deserialize(dec); err != nil {
		panic(err)
	}

	if err := dec.Decode(&p.myNewMemberVariable); err != nil {
		panic(err)
	}

    var isPtr bool
	if err := dec.Decode(&isPtr); err != nil {
		panic(err)
	}
	if isPtr {
        if err := dec.Decode(&p.mySecondMemberVariablePtr); err != nil {
            panic(err)
        }
	}
	return
}
*/


type {{t.GoName}}EditPanelCreator struct {
	ID string
}

func (c {{t.GoName}}EditPanelCreator) Create(ctx context.Context, parent page.ControlI) page.ControlI {
	p := New{{panelName}}(ctx, parent, c.ID)
	return p
}

func Get{{= panelName }}(c page.ControlI, id string) *{{= panelName }} {
	return c.Page().GetControl(id).(*{{= panelName }})
}

func init() {
    page.RegisterControl(&{{= panelName }}{})
}

}}