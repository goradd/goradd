// detail.tmpl

// The master template for the DetailPanel classes

var panelName = t.GoName + "DetailPanel"

{{

package form

// This file is generated by goradd. DO NOT EDIT. Your changes will be lost.
// To use this file, copy it to your goradd-project/web/panel directory and modify it there.

import(
	"github.com/goradd/goradd/pkg/page"
	"github.com/goradd/goradd/pkg/page/control"
	"github.com/goradd/goradd/pkg/page/control/dialog"
	"context"
	"goradd-project/gen/{{dd.DbKey}}/connector"
	"goradd-project/gen/{{dd.DbKey}}/model"
	"goradd-project/gen/{{dd.DbKey}}/model/node"
)

// {{= panelName }} is a panel of static controls that shows the content of a {{= t.GoName }} object.
type {{= panelName }} struct {
	control.Panel
	{{= t.GoName }} *model.{{= t.GoName }}
}

// New{{= panelName }} returns a panel of static controls that displays the content of a {{= t.GoName }} object.
func New{{= panelName }}(ctx context.Context, parent page.ControlI, id string) *{{= panelName}} {
    p := new({{= panelName }})
    p.Self = p
	p.Init(ctx, parent, id)
	return p
}

// Init initializes the panel. It should be called by any derived objects.
func (p *{{= panelName }}) Init(ctx context.Context, parent page.ControlI, id string) {
	p.Panel.Init(parent, id)
	p.CreateControls(ctx)
}

// CreateControls is the place to create the controls that will be displayed by the panel
func (p *{{= panelName }}) CreateControls(ctx context.Context) {
}

// DoAction responds to actions in the panel.
func (p *{{= panelName }}) DoAction(ctx context.Context, a action.Params) {
    switch a.ID {
    default:
        p.Panel.DoAction(ctx, a)
    }
}

// Load puts data from the database into the panel. pk is the primary key of a model.{{= t.GoName }}
// database record
func (p *{{= panelName }}) Load(ctx context.Context, pk string) error {
{{if t.PrimaryKeyColumn().ColumnType == query.ColTypeString }}
    pk2 := pk
{{else}}
    // convert from string to pk type
    pk2 := query.{{= t.PrimaryKeyColumn().ColumnType.String() }}.FromString(pk).({{= t.PrimaryKeyGoType() }})
{{if}}

	p.{{= t.GoName }} = model.Load{{= t.GoName }}(ctx, pk2,
{{for _,rr := range t.ReverseReferences}}
    {{if rr.IsUnique() }}
            node.{{= t.GoName}}().{{= rr.GoName}}(),
    {{else}}
            node.{{= t.GoName}}().{{= rr.GoPlural}}(),
    {{if}}
{{for}}
    )
    if p.{{= t.GoName }} == nil {
        d := dialog.Alert(p,
            p.ParentForm().GT("Error"),
            p.ParentForm().GT("The record was not found. Perhaps it was recently deleted by someone else."),
            true,
            "OK")
        d.SetTitle(p.ParentForm().GT("Error"))
        return page.NewFrameworkError(page.FrameworkErrRecordNotFound)
    }
    p.Refresh()
    return nil
}

// Refresh loads the controls with data from the cached model.{{= t.GoName }} object.
func (p *{{= panelName }}) Refresh() {
    p.Panel.Refresh()
}

// Reload loads the controls with data found in the database, over-writing any changes made to the internal data object.
func (p *{{= panelName }}) Reload(ctx context.Context) {
    _ = p.Load(ctx, fmt.Sprint(p.{{= t.GoName }}.OriginalPrimaryKey()))
}

// {{t.GoName}}DetailPanelCreator is the creator that will create the {{t.GoName}}DetailPanel.
type {{t.GoName}}DetailPanelCreator struct {
	ID string
}

// Create is called by the framework to create a new {{panelName}} from the information in the creator object.
func (c {{t.GoName}}DetailPanelCreator) Create(ctx context.Context, parent page.ControlI) page.ControlI {
	p := New{{panelName}}(ctx, parent, c.ID)
	return p
}

// Get{{= panelName }} returns the {{= panelName }} object with the given id. It will panic if the
// id is not in the form, or if the object is not the correct type.
func Get{{= panelName }}(c page.ControlI, id string) *{{= panelName }} {
	return c.Page().GetControl(id).(*{{= panelName }})
}

func init() {
    page.RegisterControl(&{{= panelName }}{}) // registers the control with the framework for serialization.
}

}}