// listCreateControls.tmpl

{{

// CreateControls creates the controls in the panel.
func (p *{{= panelName }}) CreateControls(ctx context.Context) {
	if {{= t.LcGoName }}ListShowFilterBar {
        p.AddControls(ctx,
            textbox.TextboxCreator{
                ID:          {{= t.LcGoName }}FilterTextID,
                Placeholder: p.GT("Search..."),
                Type:        textbox.SearchType,
                ControlOptions: page.ControlOptions{
                    On: page.EventList{
                        {event.Input().Delay(300), action.Do(p.ID(), {{= lcPanelName }}Search)},
                        {event.EnterKey().Terminating(), action.Do(p.ID(), {{= lcPanelName }}Search)},
                    },
                },
            },
        )
    }
    var caption interface{}
    if {{= t.LcGoName }}ListShowDataPager {
        caption = {{= codegen.ObjectType(generator.DefaultDataPagerType) }}Creator {
                                  ID:            {{= t.LcGoName }}PagerID,
                                  PagedControlID:{{= t.LcGoName }}ListID,
                              }
    }

	p.AddControls(ctx,
        table.PagedTableCreator{
            ID:  {{= t.LcGoName }}ListID,
            HeaderRowCount: 0,
            DataProviderID: p.ID(),
            RowStylerID: p.ID(),
            PageSize: {{= ctrlPkg }}.DefaultPagerPageSize,
            Caption: caption,
            OnCellClick: action.Do(p.ID(), {{= lcPanelName }}RowClick).ActionValue(javascript.JsCode(event.CellClickRowValue)),
            ControlOptions: page.ControlOptions{
                Class:          "gr-clickable-rows",
                WatchedDbTables: page.Nodes(node.{{= t.GoName }}()),
            },
            Columns: p.ColumnCreators(ctx),
        },
        {{= codegen.ObjectType(generator.DefaultButtonType) }}Creator {
            ID: {{= t.LcGoName }}NewButtonID,
            Text: p.GT("New"),
            OnClick:action.Do(p.ID(), {{= lcPanelName }}NewClick),
        },
	)
}

}}
