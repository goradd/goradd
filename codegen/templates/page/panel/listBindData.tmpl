// listBindData.tmpl

{{

// BindData determines what records will be displayed in the lister.
// Override to change what records get displayed.
func (p *{{= panelName }}) BindData(ctx context.Context, s {{= ctrlPkg }}.DataManagerI) {
    switch s.ID() {
    case {{= t.LcGoName }}ListID: // the table
        t := p.listTable()
        if t.HasDataPagers() {
            t.SetTotalItems(p.BuildQuery(ctx).Count(false))
        }

        builder := p.BuildQuery(ctx)

        // Here we get sort columns from the table.
        // Alternatively, use table nodes to set the sort order.
        builder.OrderBy(column.MakeNodeSlice(t.SortColumns())...)

        // Limit the results to what is visible in the table
        builder.Limit(t.SqlLimits())

        d := builder.Load()
        s.SetData(d)

    }
}

func (p *{{= panelName }}) BuildQuery(ctx context.Context) *model.{{= t.GoPlural }}Builder {
	q := model.Query{{= t.GoPlural }}(ctx)
{{if forwardJoins != nil}}
    // Joins for display of related objects. The default joins just forward references.
    // If you need reverse or many-many references, add those here.
    // You can also optimize your query by removing forward references that are not
    // being used in the query or display of the list.
{{for _,col := range forwardJoins }}
    q.Join(node.{{= t.GoName }}().{{= col.ForeignKey.GoName }}())
{{for}}
{{if}}

	if {{= t.LcGoName }}ListShowFilterBar {
        filterText := p.filterText().Text()

	    q = q.Where(op.Or(
{{for _,col := range t.Columns }}
    		op.StartsWith(node.{{= t.GoName }}().{{= col.GoName }}(), filterText),
{{for}}
    	))
    }
	return q
}

}}
