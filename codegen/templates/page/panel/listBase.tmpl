//listPanelBase.tmpl

// The master template for the ListPanelBase classes

var objectType = "List" // Eventually we might make it possible to generate multiple object types
var panelName = t.GoName + "ListPanelBase"
var lcPanelName = t.LcGoName + objectType + "Panel"

{{

package panel

// This file is generated by goradd. DO NOT EDIT. Your changes will be lost.

import(
	"context"
	html2 "github.com/goradd/goradd/pkg/html"
	"github.com/goradd/goradd/pkg/javascript"
	"github.com/goradd/goradd/pkg/orm/op"
	"github.com/goradd/goradd/pkg/orm/query"
	"github.com/goradd/goradd/pkg/page"
	"github.com/goradd/goradd/pkg/page/action"
	. "github.com/goradd/goradd/pkg/page/control"
	"github.com/goradd/goradd/pkg/page/control/column"
	"github.com/goradd/goradd/pkg/page/event"
	"goradd-project/gen/{{= dd.DbKey }}/model"
	"goradd-project/gen/{{= dd.DbKey }}/model/node"
)

type {{= panelName }} struct {
	Panel
}

type {{= panelName }}I interface {
	PanelI
	BuildQuery(ctx context.Context) *model.{{= t.GoPlural }}Builder
}


// this returns the interface for calling into "virtual" functions. This allows us to call functions defined
// by a subclass.
func (p *{{= panelName }}) this() {{= panelName }}I {
	return p.Self.({{= panelName }}I)
}

// createControls creates the controls in the panel.
// Override this to change what controls get created.
func (p *{{= panelName }}) createControls(ctx context.Context) {
	p.AddControls(ctx,
		PanelCreator{
			ID: p.ID() + "-filterPanel",
			Children: Children(
				TextboxCreator{
					ID:          p.ID() + "-filterText",
					Placeholder: p.GT("Search..."),
					Type:        TextboxTypeSearch,
					ControlOptions: page.ControlOptions{
						On: page.EventList{
							{event.Input().Delay(300), action.Ajax(p.ID(), {{= lcPanelName }}Search)},
							{event.EnterKey().Terminating(), action.Ajax(p.ID(), {{= lcPanelName }}Search)},
						},
					},
				},
			),
		},
        PagedTableCreator{
            ID:  p.ID() + "-list",
            HeaderRowCount: 0,
            DataProviderID: p.ID(),
            RowStylerID: p.ID(),
            PageSize: DefaultPagerPageSize,
            Caption: DataPagerCreator{
                ID:            p.ID()+"-pager",
                PagedControl:  p.ID() + "-list",
            },
            OnCellClick: action.Ajax(p.ID(), {{= lcPanelName }}RowClick).ActionValue(javascript.JsCode(event.CellClickRowValue)),
            ControlOptions: page.ControlOptions{
                Class:          "clickable-rows",
            },
            Columns:[]ColumnCreator {
{{for _,col := range t.Columns }}
                column.NodeColumnCreator{
                    Node: node.{{= t.GoName }}().{{= col.GoName }}(),
                    Title: "{{= col.GoName }}",
                {{if col.IsDateOnly}}
                    ColumnOptions: ColumnOptions{TimeFormat: config.DefaultDateFormat},
                {{else if col.IsTimeOnly}}
                    ColumnOptions: ColumnOptions{TimeFormat: config.DefaultTimeFormat},
                {{if}}
                },
{{for}}
           },
        },
		PanelCreator{
			ID: p.ID()+"-buttonPanel",
			Children:Children(
				ButtonCreator{
					ID: p.ID()+"-newButton",
					Text: p.GT("New"),
					OnClick:action.Ajax(p.ID(), {{= lcPanelName }}NewClick),
				},
			),
		},
	)
}

// GetClickedRowValue returns the value of the row that was clicked, based on the action parameters
func (p *{{= panelName }}) GetClickedRowValue(a page.ActionParams) string {
	return a.ActionValueString()
}

// BindData determines what records will be displayed in the lister.
// Override to change what records get displayed.
func (p *{{= panelName }}) BindData(ctx context.Context, s goraddctrl.DataManagerI) {
    list := GetPagedTable(p, p.ID() + "-list")
	if list.HasDataPagers() {
		list.SetTotalItems(p.this().BuildQuery(ctx).Count(ctx, false))
	}

	builder := p.this().BuildQuery(ctx)

	// Since we are asking the database to do the sort, we have to make a slice of nodes
	sortNodes := column.MakeNodeSlice(list.SortColumns())

	d := builder.Limit(list.SqlLimits()).
		OrderBy(sortNodes...).
		Load(ctx)

	s.SetData(d)
}

func (p *{{= panelName }}) BuildQuery(ctx context.Context) *model.{{= t.GoPlural }}Builder {
	return model.Query{{= t.GoPlural }}(ctx)
}

func (p *{{= panelName }}) MakeFilter(filterText string) query.NodeI {
	return op.Or(
{{for _,col := range t.Columns }}
		op.StartsWith(node.{{= t.GoName }}().{{= col.GoName }}(), filterText),
{{for}}
	)
}

func (p *{{= panelName }}) TableRowAttributes(row int, data interface{}) html2.Attributes {
	return html2.NewAttributes().SetDataAttribute("value", data.(*model.{{= t.GoName }}).PrimaryKey())
}

// Load is called when the form controls are loaded with data.
func (p *{{= panelName }}) Load(ctx context.Context) error {
    return nil
}



}}