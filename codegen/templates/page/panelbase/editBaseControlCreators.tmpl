// editBaseControlCreators.tmpl

{{

{{g

    for _,col := range t.Columns {
        if col.IsPk && col.IsId {continue}
        cd := t.ControlDescription(col)
        if cd == nil || cd.Generator == nil {continue}
        cd.Package = codegen.ObjectPackage(cd.Path)
        creatorString := cd.Generator.GenerateCreator(col, cd)
        if creatorString != "" {
            creatorString = codegen.WrapFormField(defaultWrapperType, cd.DefaultLabel, cd.ControlID, creatorString)

{{

// {{= cd.ControlName }}Creator returns a creator for the {{= cd.ControlName }} control.
func (p *{{= panelName }}) {{= cd.ControlName }}Creator() {{= defaultWrapperType }}Creator {
	return {{= creatorString }}
}

// {{= cd.ControlName }}() returns the {{= cd.ControlName }} control if it exists. Otherwise it will return nil.
func (p *{{= panelName }}) {{= cd.ControlName }}() *{{= cd.Package }}.{{= cd.ControlType }} {
    id := p.ID() + "-" + {{= t.GoName }}{{= cd.ControlIDConst() }}
    return page.Control[*{{= cd.Package }}.{{= cd.ControlType }}](p.Page(), id)
}

// {{= cd.ControlName }}Wrapper() returns the wrapper of the {{= cd.ControlName }} control if it exists. Otherwise it will return nil.
func (p *{{= panelName }}) {{= cd.ControlName }}Wrapper() *{{= defaultWrapperType }} {
    id := p.ID() + "-" + {{= t.GoName }}{{= cd.ControlIDConst() }} + config.DefaultFormFieldWrapperIdSuffix
    return page.Control[*{{= defaultWrapperType }}](p.Page(), id)
}

}}
        }
    }


    for _,ref := range t.ReverseReferences {
        cd := t.ControlDescription(ref)
        if cd == nil || cd.Generator == nil {continue}

        cd.Package = codegen.ObjectPackage(cd.Path)
        creatorString := cd.Generator.GenerateCreator(ref, cd)
        if creatorString != "" {
            creatorString = codegen.WrapFormField(defaultWrapperType, cd.DefaultLabel, cd.ControlID, creatorString)

{{
// {{= cd.ControlName }}Creator returns a creator object used to create the {{= cd.ControlName }}.
func (p *{{= panelName }}) {{= cd.ControlName }}Creator() {{= defaultWrapperType }}Creator {
	return {{= creatorString }}
}

// {{= cd.ControlName }}() returns the {{= cd.ControlName }} control, or nil if the control is not in the panel.
func (p *{{= panelName }}) {{= cd.ControlName }}() *{{= cd.Package }}.{{= cd.ControlType }} {
    id := p.ID() + "-" + {{= t.GoName }}{{= cd.ControlIDConst() }}
    return page.Control[*{{= cd.Package }}.{{= cd.ControlType }}](p.Page(), id)
}

}}
        }
    }

    for _,ref := range t.ManyManyReferences {
        cd := t.ControlDescription(ref)
        if cd == nil || cd.Generator == nil {continue}

        cd.Package = codegen.ObjectPackage(cd.Path)
        creatorString := cd.Generator.GenerateCreator(ref, cd)
        if creatorString != "" {
            creatorString = codegen.WrapFormField(defaultWrapperType, cd.DefaultLabel, cd.ControlID, creatorString)

{{
// {{= cd.ControlName }}Creator() returns a creator object used to create a {{= cd.ControlName }} control.
func (p *{{= panelName }}) {{= cd.ControlName }}Creator() {{= defaultWrapperType }}Creator {
	return {{= creatorString }}
}

// {{= cd.ControlName }} returns the {{= cd.ControlName }}, or nil if the {{= cd.ControlName }} is not in the panel.
func (p *{{= panelName }}) {{= cd.ControlName }}() *{{= cd.Package }}.{{= cd.ControlType }} {
    id := p.ID() + "-" + {{= t.GoName }}{{= cd.ControlIDConst() }}
    return page.Control[*{{= cd.Package }}.{{= cd.ControlType }}](p.Page(), id)
}

}}
        }
    }

}}

}}

