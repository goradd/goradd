package template

import (
	"github.com/goradd/goradd/codegen/generator"
	"github.com/goradd/goradd/pkg/config"
	"io"
	"github.com/goradd/goradd/pkg/orm/db"
 	"github.com/goradd/goradd/pkg/page"
    "fmt"
    "strconv"
)

// This sets up a special connector that satisfies the DataConnector interface, but also
// provides an Export method so that the ExportCreator function can use that during export.
// The export function will output a "%s" instead of a value for the connector so that we can fill
// that in later.
// The end result is that it makes it easier for us to make control generators.
type connectorPlaceHolder struct {}
func (c connectorPlaceHolder) Refresh(i page.ControlI, model interface{}) {}
func (c connectorPlaceHolder) Update(i page.ControlI, model interface{}) {}
func (c connectorPlaceHolder) Export() string {
    return `%s`
}

func init() {
	t := EditPanelBaseTemplate {
		generator.Template {
			Overwrite: true,
			TargetDir: config.ProjectDir() + "/gen",
		},
	}
	generator.AddTableTemplate(&t)
}

type EditPanelBaseTemplate struct {
	generator.Template
}

func (n *EditPanelBaseTemplate) FileName(key string, t generator.TableType) string {
	return n.TargetDir + "/" + key + "/panelbase/" + t.FileName() + "_edit_panel.base.go"
}

func (n *EditPanelBaseTemplate) GenerateTable(codegen generator.CodeGenerator, dd *db.Model, t generator.TableType,  _w io.Writer) (err error) {
	{{: "panelbase/editBase.tmpl" }}
	return
}

func (n *EditPanelBaseTemplate) Overwrite() bool {
	return n.Template.Overwrite
}


