{{#
This is a template file that defines how the IntroPanel will be drawn. You will learn more about panels
in the tutorials on controls. Just know that there are a variety of ways to customize controls, and
a template like this one is just one of the many ways. The template program used is called "got" and
its language is very easy to learn. Its similar to the standard Go template language, but more flexible.
}}

{{#
The define statements below create got "fragments", which is just a way to a define a variable. For example,
the line below creates the "package" fragment and gives it the value "orm".
}}
{{define package }}orm{{end package}}

{{# This define tells the compiler to attach the template to the ObjectsPanel control. }}
{{define control}}ObjectsPanel{{end control}}

{{# The template fragment here defines the actual html we want to output from the control. }}
{{define template }}
<h1>The Code-generated Go Objects</h1>

<p>The Code Generator will create a Go object for most of the tables in your database in groups of two files.
One file is a base file, and contains code that is regenerated every time you run the code generator. This file
contains accessors to the various fields of the table, and functions to do queries, updates and deletes.
The other file is a companion object that embeds the base file, and that lets you override the functions
in the base file, as well as define your own functions to access the database. The companion file only gets
generated one time, and so you may edit it and change it as you like and your changes will be preserved.</p>

<p>You will see this idea of a base file that gets recreated every time the code generator runs, and an enclosing
object that embeds the base object, throughout GoRADD. We call this scaffolding...a way of layering the code
so that when you change the database, or when GoRADD itself is updated, you do not have to rewrite your program
to take advantage of the changes.</p>

<p>The example below shows how we can use the <strong>Load*()</strong> methods and the
    properties to view some of the data.  Be sure to click on the source links to view some of the code
    that made this page.</p>

{{g
    // This "g" tag lets us drop in to Go code whenever we want. Normally you would not write a lot of Go code
    // inside a template, but rather you would put your go code in a separate file, often in a Form or Panel object.
    // However, for purposes of simplifying this tutorial, we will access the database straight from here.

    // The code here loads the person that has an id, or primary key, of "1". Note that even though SQL can use integers as
    // primary keys, we always use strings to identify primary keys. Many other types of databases only use strings,
    // and this makes our code portable.
    person := model.LoadPerson(ctx, "1")
    project := model.LoadProject(ctx, "1")
}}
<p>
<div>Person 1</div>
<div>{{= person.FirstName() }} {{= person.LastName() }}</div>
</p>
<p>
<div>Project 1</div>
<div>{{= project.Name() }}</div>
<div>{{= project.Description() }}</div>
<div>{{= project.ProjectStatusType().String() }}</div>
</p>

{{end template}}

{{#
The tag below will output the renderControlTemplate fragment, which is a pre-defined fragment that is part of the
GoRADD system. If you want to see how this fragment is defined, you will find it in pkg/page/macros.inc.got.
The tag will use the fragments defined above to create the drawing function that will eventually get compiled into the
program. To build the template, run "go generate" on the build.go file in the directory.

This is a common pattern in GoRADD that lets you separate your
template code from the Go code that uses the template to draw.
}}
{{renderControlTemplate}}
