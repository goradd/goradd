{{define package }}controls{{end package}}
{{define imports }}
{{end imports}}
{{define control}}ActionsPanel{{end control}}

{{define template }}
<h1>Actions</h1>
<h2>Intro</h2>
<p>
As mentioned previously, <i>Events</i> are attached to controls and trigger <i>Actions</i>.
</p>
<p>
There are two types of actions:
<ul>
<li>Javascript Actions
<li>Callback Actions
</ul>
</p>
<h2>Javascript Actions</h2>
<p>
Javascript Actions are snippets of Javascript code that execute in the client browser in response to an event.
</p>
<p>
For example, the following code will convert any text to uppercase while it is typed.
</p>
<label>To Uppercase</label>{{draw textbox1}}
<code>
textbox1 := NewTextbox(p, "textbox1")
textbox1.On(event.Input(), action.Javascript("event.target.value = event.target.value.toUpperCase()"))
</code>
<p>
GoRADD predefines some Javascript actions to do common tasks. You can find the complete list of predefined Javascript
actions in the <a href="https://pkg.go.dev/github.com/goradd/goradd/pkg/page/action">Actions Documentation</a> under the ActionI heading.
</p>
<h2>Callback Actions</h2>
<p>
Callback actions invoke the control.DoAction() that is in every GoRADD control. You specify the id
of the control that will receive the action, and your own integer action id that is sent to the DoAction() function,
and the action function takes it from there.
</p>
<p>
The two buttons below use actions to get both the server's time and browser's time.
Click on the "2-actions.go" button under the View Source list to see how these buttons are
created and how the DoAction() function responds.
Note that the DoAction() function just sets the text of the span and the span is automatically redrawn
in the browser with the new value.
</p>
<p>
{{draw serverTimeButton}} {{draw clientTimeButton}} {{draw timeSpan}}
</p>

{{end template}}

{{renderControlTemplate}}
