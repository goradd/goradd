//** This file was code generated by GoT. DO NOT EDIT. ***

package panels

import (
	"context"
	"io"
)

func (ctrl *TableSelectPanel) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `<style>
#table2_scroller {
    border: 1px solid gray;
    overflow-x: hidden;
    overflow-y: scroll;
    height: 200px;
    width: 50%;
    margin-bottom: 20px;
    scroll-behavior: smooth;
}
</style>

<h2>Tables - Selectable Rows</h2>
<p>
The SelectTable is a table that is used to select an item from a list of items. It uses css and javascript to demonstrate
to the user that the table is selectable, and it will remember the selection and report back to the go code
through a RowSelected event when an item is selected, and what that item was.
</p>
`); err != nil {
		return
	}

	if `` == "" {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("table1").Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("table1").ProcessAttributeString(``).Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `<p>
The next example is a select table that is scrollable.
The SelectTable will show the selected item at startup, and when its javascript <i>showSelectedItem</i> function
is called, which you can do from a Javascript action.
Some things to try as a demonstration of its capabilities:
</p>
<ul>
<li>Select an item, scroll the table so the selected item is not showing, and then click the Show Selected Item button.</li>
<li>Select an item, scroll the table so the selected item is not showing, and then refresh the page.</li>
</ul>
<p>
In each case, you should see the table scrolled so that the item is visible.
</p>
`); err != nil {
		return
	}

	if `` == "" {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("table2").Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("table2").ProcessAttributeString(``).Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
<div class="boxed" style="width:50%">
`); err != nil {
		return
	}

	if `` == "" {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("infoPanel").Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("infoPanel").ProcessAttributeString(``).Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `</div>
`); err != nil {
		return
	}

	if `` == "" {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("showButton").Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("showButton").ProcessAttributeString(``).Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `

`); err != nil {
		return
	}

	return
}
