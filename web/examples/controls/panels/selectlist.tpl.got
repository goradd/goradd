{{< package }}panels{{end package}}
{{< imports }}
{{end imports}}
{{< control }}SelectListPanel{{end control}}

{{define template }}
<h2>Selection Lists</h2>
<p>
Selection lists let you select a zero, one, or multiple items from a group of items.
Below are the supported selection lists
that represent what is available through standard html controls. Many css/javascript frameworks use
these standard html widgets as the basis for their more elaborate selection mechanisms.
</p>
<p>
Selection lists all use the ItemList mixin, so you have a single kind of interface to add labels and
associated values to the list. Individual items can be styled as well.
</p>
<p>
These lists expect to have all of the items inserted and styled before being drawn. If you change items
after they are drawn, in response to a button click for example, then be sure to call Refresh() on the control
to redraw the list of items to select from.
While some of the list widgets can allow items to scroll in and out of view,
all the items in a list are rendered to html (In other words, the html is sent to the browser, but
items that are scrolled out of view are simply hidden from the user by the browser).
There is no current mechanism for paging in or filtering items not shown.
Therefore, these selection lists are not great for selecting from a very large list of items.
</p>
<p>
Also see the types of columns available in the html table control which can serve as selections from a list.
Tables are better at managing a very large list of items to select from, as the items in a
table can be paged in, and can also be filtered.
</p>
<h3>Single Selection Lists</h3>
<p>
These lists let the user select zero or one item from a list. If you call SetRequired(true), then
the user will be forced to select an item.
</p>
<h4>SelectList</h4>
<p>
A SelectList is a typical dropdown list with a single selection. You can also set the size attribute
to display it as a scrolling list rather than a dropdown list.
</p>
{{draw singleSelectList-ff }}
{{draw selectListWithSize-ff }}
<h4>RadioList</h4>
<p>
A radio list presents a list of radio buttons in a table format. The Value of the control is the value
of the item the user selects.
</p>
<p>
RadioLists can be scrolling lists if you wish. To see the scrolling effect, you have to somehow limit the
size of the control itself using CSS.
</p>

{{draw radioList1-ff }}
{{draw radioList2-ff }}
{{draw radioList3-ff }}

<h3>Multiple Selection Lists</h3>
<p>
These lists let the user select zero or multiple items from a list. If you call SetRequired(true), then
the user will be forced to select at least one item.
</p>
<h4>HTML Multiple Selection List</h4>
<p>
{{!
This list allows multiple selections if you hold down the shift key or the command key. While this is
a standard html widget, the look and behavior of this widget often depends on the browser used and
the operating system, so its not a great widget for multiple selections. It is here for completeness, and
also in case a javascript widget can build a better interface on top of it. Also, notice that it
sets the "required" attribute, which lets the browser check to see if an item is selected. But again,
the user interface is dependent on the browser, and sometimes it is very confusing to a user. You can
turn off browser validity checking by setting the "novalidate" attribute on the form.
}}
</p>
{{draw multiselectList-ff }}
<h4>Checkbox List</h4>
<p>
This list is similar to the radio list above, but uses checkboxes so you can select multiple
items. It is a much better way to present to the user a selection of multiple items, and is the default
control that gets generated by the code generator to let you edit one-to-many relationships between
data objects.
</p>
{{draw checklist1-ff }}

{{draw ajaxButton }}
{{draw serverButton }}
{{end template}}

{{renderControlTemplate}}