//** This file was code generated by GoT. DO NOT EDIT. ***

package panels

import (
	"context"
	"io"

	"github.com/goradd/goradd/pkg/page"
	"github.com/goradd/goradd/pkg/page/control"
)

type HtmlPanel struct {
	control.Panel
}

// NewHtmlPanel creates a new HtmlPanel panel control.
func NewHtmlPanel(parent page.ControlI, id string) control.PanelI {
	p := new(HtmlPanel)
	p.Panel.Init(p, parent, id)
	return p
}

// DrawTemplate draws the template defined in the template file for the HtmlPanel control.
func (ctrl *HtmlPanel) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `<h2>Panel Template</h2>
<p>
A Panel control draws a div tag on the screen. By itself, it can serve as a wrapper for child controls.
</p>
<p>
To draw HTML in a panel, define the HTML in a template and associate the template with a new Panel sub-type
that you define. An example of this can be found in the source for the ProxyTable example.</p>
<p>
However, an easier way to do it if you just want to display HTML is to use the renderPanel template macro.
To do that, you define a control value and a template value in the template, and then call the
renderPanel macro. In fact, the text you are reading now is created in exactly this way.
</p>
<p>
The template takes care of generating all the boilerplate code so you can just define some html to display.
See the panel_template.tpl.got file for the source of the panel you are reading.
</p>
`); err != nil {
		return
	}

	return
}

func init() {
	page.RegisterControl(new(HtmlPanel))
}

// HtmlPanelCreator creates a div control that draws a template.
// Pass it to AddControls or as a child of a parent control.
type HtmlPanelCreator struct {
	ID string
}

// Create is called by the framework to create the panel.
func (c HtmlPanelCreator) Create(_ context.Context, parent page.ControlI) page.ControlI {
	ctrl := NewHtmlPanel(parent, c.ID)
	return ctrl
}

// GetHtmlPanel is a convenience method to return the HtmlPanel with the given id from the page.
func GetHtmlPanel(c page.ControlI, id string) *HtmlPanel {
	return c.Page().GetControl(id).(*HtmlPanel)
}

// NewPanelTemplatePanel creates an example panel for the template panel.
//
// This is just for the examples code. You would not normally need to create this extra function. Just directly
// call NewHtmlPanel, or whatever you call it in the "control" macro you define in the template.
func NewPanelTemplatePanel(ctx context.Context, parent page.ControlI) {
	NewHtmlPanel(parent, "htmlPanel")
}
