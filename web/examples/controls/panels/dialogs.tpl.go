//** This file was code generated by GoT. DO NOT EDIT. ***

package panels

import (
	"context"
	"io"
)

func (ctrl *DialogsPanel) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `<h2>Dialogs and Alerts</h2>
<p>
Dialogs pop up in front of a page to get an immediate response from a user. Simple dialogs
give important information to the user, and more complex dialogs gather information from a user.
</p>
<p>
When coding dialogs in a desktop application, often you can make your code pause while the
user gives a response, but you cannot do that in a web application. In Goradd, you pop up a
dialog and provide actions that will be fired when the user clicks a button or closes the dialog.
You then respond to those actions in an Action() function.
</p>
<p>
The process of presenting a dialog in a web application can be quite complex. Making sure the dialog
floats above all other content, is styled correctly, captures the focus of the keyboard and mouse, and then goes away
when not needed can require additional JavaScript and style sheets. Dialogs are so special, that many CSS frameworks
include their own specific Dialog widget.
</p>
<p>
When you work with dialogs in Goradd, you do not work with the actual dialog control, but rather a DialogPanel,
or a subclass of a DialogPanel. The actual Dialog control will be the parent of that Panel and will essentially
wrap the DialogPanel. The
reason for this is to allow you to specify what kind of Dialog control you want Goradd to pop up whenever it needs a dialog.
For example, Goradd has a default Dialog widget, but if you are using the Bootstrap library, you can tell Goradd to use
the Bootstrap Modal widget instead.
</p>
`); err != nil {
		return
	}

	if `` == "" {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("alertButton").Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("alertButton").ProcessAttributeString(``).Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if `` == "" {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("messageButton").Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("messageButton").ProcessAttributeString(``).Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}
