//** This file was code generated by GoT. DO NOT EDIT. ***

package panels

import (
	"context"
	"io"
)

func (ctrl *RepeaterPanel) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `<h2>Repeaters</h2>
<p>
The Repeater control repeats an HTML snippet of code once for each item of data you provide.
It is similar to a table, which creates a table row for each item of data, but it lets you repeat
custom html. You can base the html on a string you create, or on a GOT template.
</p>
<p>
Repeaters can use Pagers to control which data items are shown in the repeater.
</p>
`); err != nil {
		return
	}

	if `` == "" {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("pager1").Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("pager1").ProcessAttributeString(``).Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if `` == "" {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("repeater1").Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if err = ctrl.Page().GetControl("repeater1").ProcessAttributeString(``).Draw(ctx, _w); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	return
}
