package node

// Code generated by goradd. DO NOT EDIT.

import (
	"encoding/gob"

	"github.com/goradd/goradd/pkg/orm/query"
)

type reverseNode struct {
	query.ReferenceNodeI
}

func Reverse() *reverseNode {
	n := reverseNode{
		query.NewTableNode("goraddUnit", "reverse", "Reverse"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *reverseNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	return nodes
}
func (n *reverseNode) PrimaryKeyNode_() *query.ColumnNode {
	return n.ID()
}
func (n *reverseNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
func (n *reverseNode) Copy_() query.NodeI {
	return &reverseNode{query.CopyNode(n.ReferenceNodeI)}
}

// ID represents the id column in the database.
func (n *reverseNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goraddUnit",
		"reverse",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n *reverseNode) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goraddUnit",
		"reverse",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ForwardsAsNotNull represents the many-to-one relationship formed by the reverse reference from the
// id column in the reverse table.
func (n *reverseNode) ForwardsAsNotNull() *forwardNode {

	cn := &forwardNode{
		query.NewReverseReferenceNode(
			"goraddUnit",
			"reverse",
			"id",
			"ForwardsAsNotNull",
			"forward",
			"reverse_not_null_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// ForwardAsUniqueNotNull represents the one-to-one relationship formed by the reverse reference from the
// id column in the reverse table.
func (n *reverseNode) ForwardAsUniqueNotNull() *forwardNode {

	cn := &forwardNode{
		query.NewReverseReferenceNode(
			"goraddUnit",
			"reverse",
			"id",
			"ForwardAsUniqueNotNull",
			"forward",
			"reverse_unique_not_null_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// ForwardsAsNull represents the many-to-one relationship formed by the reverse reference from the
// id column in the reverse table.
func (n *reverseNode) ForwardsAsNull() *forwardNode {

	cn := &forwardNode{
		query.NewReverseReferenceNode(
			"goraddUnit",
			"reverse",
			"id",
			"ForwardsAsNull",
			"forward",
			"reverse_null_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// ForwardAsUniqueNull represents the one-to-one relationship formed by the reverse reference from the
// id column in the reverse table.
func (n *reverseNode) ForwardAsUniqueNull() *forwardNode {

	cn := &forwardNode{
		query.NewReverseReferenceNode(
			"goraddUnit",
			"reverse",
			"id",
			"ForwardAsUniqueNull",
			"forward",
			"reverse_unique_null_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func init() {
	gob.RegisterName("reverseNode2", &reverseNode{})
}
