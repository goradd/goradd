package node

// Code generated by goradd. DO NOT EDIT.

import (
	"encoding/gob"

	"github.com/goradd/goradd/pkg/orm/query"
)

type forwardNode struct {
	query.ReferenceNodeI
}

func Forward() *forwardNode {
	n := forwardNode{
		query.NewTableNode("goraddUnit", "forward", "Forward"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *forwardNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.ReverseNotNullID())
	nodes = append(nodes, n.ReverseUniqueNotNullID())
	nodes = append(nodes, n.ReverseNullID())
	nodes = append(nodes, n.ReverseUniqueNullID())
	return nodes
}
func (n *forwardNode) PrimaryKeyNode_() *query.ColumnNode {
	return n.ID()
}
func (n *forwardNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
func (n *forwardNode) Copy_() query.NodeI {
	return &forwardNode{query.CopyNode(n.ReferenceNodeI)}
}

// ID represents the id column in the database.
func (n *forwardNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goraddUnit",
		"forward",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n *forwardNode) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goraddUnit",
		"forward",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ReverseNotNullID represents the reverse_not_null_id column in the database.
func (n *forwardNode) ReverseNotNullID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goraddUnit",
		"forward",
		"reverse_not_null_id",
		"ReverseNotNullID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ReverseNotNull represents the the link to the ReverseNotNull object.
func (n *forwardNode) ReverseNotNull() *reverseNode {
	cn := &reverseNode{
		query.NewReferenceNode(
			"goraddUnit",
			"forward",
			"reverse_not_null_id",
			"ReverseNotNullID",
			"ReverseNotNull",
			"reverse",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// ReverseUniqueNotNullID represents the reverse_unique_not_null_id column in the database.
func (n *forwardNode) ReverseUniqueNotNullID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goraddUnit",
		"forward",
		"reverse_unique_not_null_id",
		"ReverseUniqueNotNullID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ReverseUniqueNotNull represents the the link to the ReverseUniqueNotNull object.
func (n *forwardNode) ReverseUniqueNotNull() *reverseNode {
	cn := &reverseNode{
		query.NewReferenceNode(
			"goraddUnit",
			"forward",
			"reverse_unique_not_null_id",
			"ReverseUniqueNotNullID",
			"ReverseUniqueNotNull",
			"reverse",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// ReverseNullID represents the reverse_null_id column in the database.
func (n *forwardNode) ReverseNullID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goraddUnit",
		"forward",
		"reverse_null_id",
		"ReverseNullID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ReverseNull represents the the link to the ReverseNull object.
func (n *forwardNode) ReverseNull() *reverseNode {
	cn := &reverseNode{
		query.NewReferenceNode(
			"goraddUnit",
			"forward",
			"reverse_null_id",
			"ReverseNullID",
			"ReverseNull",
			"reverse",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// ReverseUniqueNullID represents the reverse_unique_null_id column in the database.
func (n *forwardNode) ReverseUniqueNullID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goraddUnit",
		"forward",
		"reverse_unique_null_id",
		"ReverseUniqueNullID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ReverseUniqueNull represents the the link to the ReverseUniqueNull object.
func (n *forwardNode) ReverseUniqueNull() *reverseNode {
	cn := &reverseNode{
		query.NewReferenceNode(
			"goraddUnit",
			"forward",
			"reverse_unique_null_id",
			"ReverseUniqueNullID",
			"ReverseUniqueNull",
			"reverse",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.RegisterName("forwardNode2", &forwardNode{})
}
