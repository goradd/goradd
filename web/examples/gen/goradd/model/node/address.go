// Code generated by GoRADD. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/goradd/pkg/orm/query"
)

type addressNode struct {
	query.ReferenceNodeI
}

func Address() *addressNode {
	n := addressNode{
		query.NewTableNode("goradd", "public.address", "Address"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *addressNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.PersonID())
	nodes = append(nodes, n.Street())
	nodes = append(nodes, n.City())
	return nodes
}
func (n *addressNode) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}
func (n *addressNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
func (n *addressNode) Copy_() query.NodeI {
	return &addressNode{query.CopyNode(n.ReferenceNodeI)}
}

// ID represents the id column in the database.
func (n *addressNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.address",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// PersonID represents the person_id column in the database.
func (n *addressNode) PersonID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.address",
		"person_id",
		"PersonID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Person represents the link to the Person object.
func (n *addressNode) Person() *personNode {
	cn := &personNode{
		query.NewReferenceNode(
			"goradd",
			"public.address",
			"person_id",
			"PersonID",
			"Person",
			"public.person",
			"id",
			false,
			query.ColTypeString,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Street represents the street column in the database.
func (n *addressNode) Street() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.address",
		"street",
		"Street",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// City represents the city column in the database.
func (n *addressNode) City() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.address",
		"city",
		"City",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

type addressNodeEncoded struct {
	RefNode query.ReferenceNodeI
}

func (n *addressNode) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	s := addressNodeEncoded{
		RefNode: n.ReferenceNodeI,
	}

	if err = e.Encode(s); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *addressNode) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	var s addressNodeEncoded
	if err = dec.Decode(&s); err != nil {
		panic(err)
	}
	n.ReferenceNodeI = s.RefNode
	query.SetParentNode(n, query.ParentNode(n)) // Reinforce types
	return
}

func init() {
	gob.RegisterName("addressNode2", &addressNode{})
}
