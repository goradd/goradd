// Code generated by GoRADD. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/goradd/pkg/orm/query"
)

type projectNode struct {
	query.ReferenceNodeI
}

func Project() *projectNode {
	n := projectNode{
		query.NewTableNode("goradd", "public.project", "Project"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *projectNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Num())
	nodes = append(nodes, n.StatusID())
	nodes = append(nodes, n.ManagerID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.Description())
	nodes = append(nodes, n.StartDate())
	nodes = append(nodes, n.EndDate())
	nodes = append(nodes, n.Budget())
	nodes = append(nodes, n.Spent())
	return nodes
}
func (n *projectNode) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}
func (n *projectNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
func (n *projectNode) Copy_() query.NodeI {
	return &projectNode{query.CopyNode(n.ReferenceNodeI)}
}

// ID represents the id column in the database.
func (n *projectNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Num represents the num column in the database.
func (n *projectNode) Num() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"num",
		"Num",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// StatusID represents the status_id column in the database.
func (n *projectNode) StatusID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"status_id",
		"StatusID",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Status represents the link to the Status object.
func (n *projectNode) Status() *projectStatusNode {
	cn := &projectStatusNode{
		query.NewReferenceNode(
			"goradd",
			"public.project",
			"status_id",
			"StatusID",
			"Status",
			"public.project_status_enum",
			"id",
			true,
			query.ColTypeInteger,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// ManagerID represents the manager_id column in the database.
func (n *projectNode) ManagerID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"manager_id",
		"ManagerID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Manager represents the link to the Manager object.
func (n *projectNode) Manager() *personNode {
	cn := &personNode{
		query.NewReferenceNode(
			"goradd",
			"public.project",
			"manager_id",
			"ManagerID",
			"Manager",
			"public.person",
			"id",
			false,
			query.ColTypeString,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n *projectNode) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Description represents the description column in the database.
func (n *projectNode) Description() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"description",
		"Description",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// StartDate represents the start_date column in the database.
func (n *projectNode) StartDate() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"start_date",
		"StartDate",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// EndDate represents the end_date column in the database.
func (n *projectNode) EndDate() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"end_date",
		"EndDate",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Budget represents the budget column in the database.
func (n *projectNode) Budget() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"budget",
		"Budget",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Spent represents the spent column in the database.
func (n *projectNode) Spent() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.project",
		"spent",
		"Spent",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ChildrenAsParent represents the many-to-many relationship formed by the related_project_assn table.
func (n *projectNode) ChildrenAsParent() *projectNode {
	cn := &projectNode{
		query.NewManyManyNode(
			"goradd",
			"related_project_assn",
			"parent_id",
			"ChildrenAsParent",
			"public.project",
			"child_id",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// ParentsAsChild represents the many-to-many relationship formed by the related_project_assn table.
func (n *projectNode) ParentsAsChild() *projectNode {
	cn := &projectNode{
		query.NewManyManyNode(
			"goradd",
			"related_project_assn",
			"child_id",
			"ParentsAsChild",
			"public.project",
			"parent_id",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// TeamMembers represents the many-to-many relationship formed by the team_member_project_assn table.
func (n *projectNode) TeamMembers() *personNode {
	cn := &personNode{
		query.NewManyManyNode(
			"goradd",
			"team_member_project_assn",
			"project_id",
			"TeamMembers",
			"public.person",
			"team_member_id",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// Milestones represents the many-to-one relationship formed by the reverse reference from the
// milestones column in the public.project table.
func (n *projectNode) Milestones() *milestoneNode {

	cn := &milestoneNode{
		query.NewReverseReferenceNode(
			"goradd",
			"public.project",
			"id",
			"milestones",
			"Milestones",
			"public.milestone",
			"project_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

type projectNodeEncoded struct {
	RefNode query.ReferenceNodeI
}

func (n *projectNode) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	s := projectNodeEncoded{
		RefNode: n.ReferenceNodeI,
	}

	if err = e.Encode(s); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *projectNode) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	var s projectNodeEncoded
	if err = dec.Decode(&s); err != nil {
		panic(err)
	}
	n.ReferenceNodeI = s.RefNode
	query.SetParentNode(n, query.ParentNode(n)) // Reinforce types
	return
}

func init() {
	gob.RegisterName("projectNode2", &projectNode{})
}
