// Code generated by GoRADD. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/goradd/pkg/orm/query"
)

type giftNode struct {
	query.ReferenceNodeI
}

func Gift() *giftNode {
	n := giftNode{
		query.NewTableNode("goradd", "public.gift", "Gift"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *giftNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.Number())
	nodes = append(nodes, n.Name())
	return nodes
}
func (n *giftNode) PrimaryKeyNode() *query.ColumnNode {
	return n.Number()
}
func (n *giftNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
func (n *giftNode) Copy_() query.NodeI {
	return &giftNode{query.CopyNode(n.ReferenceNodeI)}
}

// Number represents the number column in the database.
func (n *giftNode) Number() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.gift",
		"number",
		"Number",
		query.ColTypeInteger,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n *giftNode) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"public.gift",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

type giftNodeEncoded struct {
	RefNode query.ReferenceNodeI
}

func (n *giftNode) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	s := giftNodeEncoded{
		RefNode: n.ReferenceNodeI,
	}

	if err = e.Encode(s); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *giftNode) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	var s giftNodeEncoded
	if err = dec.Decode(&s); err != nil {
		panic(err)
	}
	n.ReferenceNodeI = s.RefNode
	query.SetParentNode(n, query.ParentNode(n)) // Reinforce types
	return
}

func init() {
	gob.RegisterName("giftNode2", &giftNode{})
}
