{{# Macros added to template files for drawing forms. }}

{{# draw draws a goradd control.
    parameter 1 is the id of the control to draw,
    optional parameter 2 is a string containing html attributes to set on the control before drawing.
        Each attribute is a key and value separated by an = sign.
        Key/value groups should be space separated.
        Values should be surrounded by quotes.
    For example: draw mycontrol, class="myclass" }}
{{define draw 2}}
{{if `$2` == ""}}
    {{g ctrl.Page().GetControl("$1").Draw(ctx, _w) }}
{{else}}
    {{g ctrl.Page().GetControl("$1").ProcessAttributeString(`$2`).Draw(ctx, _w) }}
{{if}}
{{end draw}}

{{# drawChild is like draw, but the given id is appended to the parent control's id. }}

{{define drawChild 2}}
{{if `$2` == ""}}
    {{g ctrl.Page().GetControl(ctrl.ID() + "$1").Draw(ctx, _w) }}
{{else}}
    {{g ctrl.Page().GetControl(ctrl.ID() + "$1").ProcessAttributeString(`$2`).Draw(ctx, _w) }}
{{if}}
{{end drawChild}}

{{# drawIf is like draw, but tests to see if the control is on the page before drawing. }}

{{define drawIf 2}}
{{if ctrl.Page().HasControl("$1")}}
    {{if `$2` == ""}}
        {{g ctrl.Page().GetControl("$1").Draw(ctx, _w) }}
    {{else}}
        {{g ctrl.Page().GetControl("$1").ProcessAttributeString(`$2`).Draw(ctx, _w) }}
    {{if}}
{{if}}
{{end drawIf}}

{{define drawChildIf 2}}
{{if ctrl.Page().HasControl(ctrl.ID() + "$1")}}
    {{if `$2` == ""}}
        {{g ctrl.Page().GetControl(ctrl.ID() + "$1").Draw(ctx, _w) }}
    {{else}}
        {{g ctrl.Page().GetControl(ctrl.ID() + "$1").ProcessAttributeString(`$2`).Draw(ctx, _w) }}
    {{if}}
{{if}}
{{end drawChildIf}}

{{# setAttributes sets the attributes of the given control using an attribute setting string. }}
{{# The string is in the form `name="value` }}

{{define setAttributes 2}}
{{g
if ctrl.Page().HasControl("$1") {
    ctrl.Page().GetControl("$1").ProcessAttributeString(`$2`)
}
}}
{{end setAttributes}}

{{define setChildAttributes 2}}
{{g
if ctrl.Page().HasControl(ctrl.ID() + "$1") {
    ctrl.Page().GetControl(ctrl.ID() + "$1").ProcessAttributeString(`$2`)
}
}}
{{end setChildAttributes}}

{{# setLabelAttributes sets the attributes on controls which have a LabelAttributes function. }}
{{# This is especially useful to set the label attributes on FormFieldWrappers. }}
{{define setLabelAttributes 2}}
{{g
if ctrl.Page().HasControl("$1") {
    ctrl.Page().GetControl("$1").(control.LabelAttributer).LabelAttributes().MergeString(`$2`)
}
}}
{{end setLabelAttributes}}

{{define setChildLabelAttributes 2}}
{{g
if ctrl.Page().HasControl(ctrl.ID() + "$1") {
    ctrl.Page().GetControl(ctrl.ID() + "$1").(control.LabelAttributer).LabelAttributes().MergeString(`$2`)
}
}}
{{end setChildLabelAttributes}}

{{define localPath 1}}
{{= http.MakeLocalPath("$1") }}
{{end localPath}}

{{# This defaults the package fragment to the name of the directory of the template. You can redefine it if needed in your individual template}}
{{define package}}{{templateParent}}{{end package}}


{{# renderFormTemplate draws a form that was defined earlier with the "template" tag. }}
{{define renderFormTemplate}}
package {{put package}}

import (
    "context"
    "github.com/goradd/goradd/pkg/page"
    "bytes"
    {{put? imports}}
)


func (ctrl *{{form}}) AddHeadTags()  {
    ctrl.FormBase.AddHeadTags()
    if "{{put? title}}" != "" {
        ctrl.Page().SetTitle("{{put? title}}")
    }

	{{put? headTags}}

	// deal with body attributes too
    ctrl.Page().BodyAttributes = `{{put? bodyAttributes}}`
}


func (ctrl *{{form}}) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {
{{
{{put template}}
}}
	return
}
{{end renderFormTemplate}}

{{# renderControlTemplate renders the template for the given control type.
    Define the "control" macro as the control type that the template is attached to.
}}
{{define renderControlTemplate}}
package {{put package}}

import (
    "context"
    "io"
    {{put? imports}}
)

func (ctrl *{{control}}) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {
{{
{{put template}}
}}
	return
}
{{end renderControlTemplate}}

{{# renderResource will draw the defined template at a given url route.
    Define the "route" macro as the url that will draw the template.
    The template should include every part of the web page, including the DOCTYPE and html tags.
}}
{{define renderResource}}
package {{put package}}

import (
    "context"
    "bytes"
    {{put imports}}
)

func init() {
    http.RegisterDrawFunc("{{> route}}",
        func(ctx context.Context, _w io.Writer) (err error) {
{{
{{put template}}
}}
        return

        })
}
{{end renderResource}}

{{# definePanel will define all the code for a panel with the given "control" name.
    This is a convenience template for creating a div that simply needs to draw
    some content.
    Define "vars" to be additional variables to add to the panel. These values should be
    upper case so that they are exported which will enable the serializer to save and restore
    them on each http call. For example:
    {{define vars}}
      MyInt int
      MyString string
    {{end vars}}

    In the template, "ctrl" will be the name of the receiver for the control.
}}

{{define definePanel}}
package {{put package}}

import (
    "context"
    "io"
    {{put? imports}}
)

type {{control}} struct {
	Panel
	{{put? vars}}
}

// New{{control}} creates a new {{control}} panel control.
func New{{control}}(parent page.ControlI, id string) PanelI {
	p := &{{control}}{}
	p.Self = p
	p.Panel.Init(parent, id)
	return p
}

// DrawTemplate draws the template defined in the template file for the {{control}} control.
func (ctrl *{{control}}) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {
{{
{{put template}}
}}
	return
}

func init() {
	page.RegisterControl(&{{control}}{})
}

{{end define Panel}}
