{{# Macros added to template files for drawing forms. }}

{{# draw draws a goradd control.
    parameter 1 is the id of the control to draw,
    optional parameter 2 is a string containing html attributes to set on the control before drawing.
        Each attribute is a key and value separated by an = sign.
        Key/value groups should be space separated.
        Values should be surrounded by quotes.
    For example: draw mycontrol, class="myclass" }}
{{define draw 2}}
{{if `$2` == ""}}
    {{e ctrl.Page().GetControl("$1").Draw(ctx, _w) }}
{{else}}
    {{e ctrl.Page().GetControl("$1").ProcessAttributeString(`$2`).Draw(ctx, _w) }}
{{if}}
{{end draw}}

{{# drawChild is like draw, but the given id is appended to the parent control's id. }}

{{define drawChild 2}}
{{if `$2` == ""}}
    {{e ctrl.Page().GetControl(ctrl.ID() + "$1").Draw(ctx, _w) }}
{{else}}
    {{e ctrl.Page().GetControl(ctrl.ID() + "$1").ProcessAttributeString(`$2`).Draw(ctx, _w) }}
{{if}}
{{end drawChild}}

{{# drawIf is like draw, but tests to see if the control is on the page before drawing. }}

{{define drawIf 2}}
{{if ctrl.Page().HasControl("$1")}}
    {{if `$2` == ""}}
        {{e ctrl.Page().GetControl("$1").Draw(ctx, _w) }}
    {{else}}
        {{e ctrl.Page().GetControl("$1").ProcessAttributeString(`$2`).Draw(ctx, _w) }}
    {{if}}
{{if}}
{{end drawIf}}

{{define drawChildIf 2}}
{{if ctrl.Page().HasControl(ctrl.ID() + "$1")}}
    {{if `$2` == ""}}
        {{e ctrl.Page().GetControl(ctrl.ID() + "$1").Draw(ctx, _w) }}
    {{else}}
        {{e ctrl.Page().GetControl(ctrl.ID() + "$1").ProcessAttributeString(`$2`).Draw(ctx, _w) }}
    {{if}}
{{if}}
{{end drawChildIf}}

{{# setAttributes sets the attributes of the given control using an attribute setting string. }}
{{# The string is in the form `name="value` }}

{{define setAttributes 2}}
{{g
if ctrl.Page().HasControl("$1") {
    ctrl.Page().GetControl("$1").ProcessAttributeString(`$2`)
}
}}
{{end setAttributes}}

{{define setChildAttributes 2}}
{{g
if ctrl.Page().HasControl(ctrl.ID() + "$1") {
    ctrl.Page().GetControl(ctrl.ID() + "$1").ProcessAttributeString(`$2`)
}
}}
{{end setChildAttributes}}

{{# setLabelAttributes sets the attributes on controls which have a LabelAttributes function. }}
{{# This is especially useful to set the label attributes on FormFieldWrappers. }}
{{define setLabelAttributes 2}}
{{g
if ctrl.Page().HasControl("$1") {
    ctrl.Page().GetControl("$1").(control.LabelAttributer).LabelAttributes().Merge(`$2`)
}
}}
{{end setLabelAttributes}}

{{define setChildLabelAttributes 2}}
{{g
if ctrl.Page().HasControl(ctrl.ID() + "$1") {
    ctrl.Page().GetControl(ctrl.ID() + "$1").(control.LabelAttributer).LabelAttributes().Merge(`$2`)
}
}}
{{end setChildLabelAttributes}}

{{# This defaults the package fragment to the name of the directory of the template. You can redefine it if needed in your individual template}}
{{define package}}{{templateParent}}{{end package}}


{{# renderFormTemplate draws a form that was defined earlier with the "template" tag. }}
{{define renderFormTemplate}}
package {{> package}}

import (
    "context"
    "github.com/goradd/goradd/pkg/page"
    "bytes"
    {{>? imports}}
)


func (ctrl *{{form}}) AddHeadTags()  {
    ctrl.FormBase.AddHeadTags()
    if "{{title}}" != "" {
        ctrl.Page().SetTitle("{{title}}")
    }

	{{>? headTags}}

	// deal with body attributes too
    ctrl.Page().BodyAttributes = `{{>? bodyAttributes}}`
}


func (ctrl *{{form}}) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {
{{
{{> template}}
}}
	return
}
{{end renderFormTemplate}}

{{define renderControlTemplate}}
package {{> package}}

import (
    "context"
    "io"
    {{>? imports}}
)

func (ctrl *{{control}}) DrawTemplate(ctx context.Context, _w io.Writer) (err error) {
{{
{{> template}}
}}
	return
}
{{end renderControlTemplate}}

{{define renderResource}}
package {{> package}}

import (
    "context"
    "bytes"
    {{imports}}
)

func init() {
    http.RegisterDrawFunc("{{> filename}}",
        func(ctx context.Context, _w io.Writer) (err error) {
{{
{{> template}}
}}
        return

        })
}
{{end renderResource}}