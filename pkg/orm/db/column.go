package db

import (
	"fmt"
	. "github.com/goradd/goradd/pkg/orm/query"
	"strings"
	"time"
)

const (
	currentTime = "now"
)

// Column describes a database column. Most of the information is either
// gleaned from the structure of the database, or is taken from a file that describes the relationships between
// different record types. Some information is filled in after analysis. Some information can be
// provided through information embedded in database comments.
type Column struct {
	// DbName is the name of the column in the database. This is blank if this is a "virtual" table for sql tables like an association or virtual attribute query.
	DbName string
	// GoName is the name of the column in go code
	GoName string
	// NativeType is the type of the column as described by the database itself.
	NativeType string
	//  ColumnType is the equivalent Go type to the database column
	ColumnType GoColumnType
	// MaxCharLength is the maximum length of characters to allow in the column if a string type column.
	// If the database has the ability to specify this, this will correspond to what is specified.
	// In any case, we will generate code to prevent fields from getting bigger than this.
	MaxCharLength uint64
	// DefaultValue is the default value as specified by the database. We will initialize new ORM objects
	// with this value. Call DefaultValueAsValue
	DefaultValue interface{}
	// MaxValue is the maximum value allowed for numeric values. This can be used by UI objects to tell the user what the limits are.
	MaxValue interface{}
	// MinValue is the minimum value allowed for numeric values. This can be used by UI objects to tell the user what the limits are.
	MinValue interface{}
	// IsId is true if this column represents a unique identifier generated by the database
	IsId bool
	// IsPk is true if this is the single primary key column. PK's do not necessarily need to be ID columns, and if not, we will need to do our own work to generate unique PKs.
	IsPk bool
	// IsNullable is true if the column can be given a NULL value
	IsNullable bool
	// IsUnique is true if the column's table has a single unique index on the column.
	IsUnique bool
	// IsTimestamp is true if the field is a timestamp. Timestamps represent a specific point in world time.
	// By default, timestamps are treated as not editable by the user. To automatically update a timestamp
	// value when its saved, you should edit the Save method in the model.
	IsTimestamp bool
	// IsDateOnly indicates that we have a time type of column that should only be concerned about the date and not the time.
	IsDateOnly bool
	// IsTimeOnly indicates that we have a time type of column that should only be concerned about the time and not the date.
	IsTimeOnly bool
	// Comment is the contents of the comment associated with this field
	Comment string

	// Filled in by analyzer

	// Options are the options extracted from the comments string
	Options map[string]interface{}
	// ForeignKey is additional information describing a foreign key relationship
	ForeignKey *ForeignKeyInfo
	// modelName is a cache for the internal model name of this column.
	modelName string
	// referenceFunction is a cache for the name of the function to call to get to the referenced object. This will work for referenced types too.
	referenceFunction string
}

// ModelName returns the name of the column
func (cd *Column) ModelName() string {
	return cd.modelName
}

// DefaultConstantName returns the name of the default value constant that will be used to refer to the default value
func (cd *Column) DefaultConstantName(tableName string) string {
	title := tableName + cd.GoName + "Default"
	return title
}

// DefaultValueAsValue returns the default value of the column as a GO value
func (cd *Column) DefaultValueAsValue() string {
	if cd.DefaultValue == nil || cd.IsId {
		v := cd.ColumnType.DefaultValue()
		if v == "" {
			return "nil"
		} else {
			return v
		}
	} else if cd.ColumnType == ColTypeTime {
		if cd.DefaultValue == currentTime {
			return "time.Now().UTC()"
		} else {
			t := cd.DefaultValue.(time.Time)
			return fmt.Sprintf("time2.NewDateTime(%d, %d, %d, %d, %d, %d, %d)", t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute(), t.Second(), t.Nanosecond())
		}
	} else {
		return fmt.Sprintf("%#v", cd.DefaultValue)
	}
}

// DefaultValueAsConstant returns the default value of the column as a Go constant
func (cd *Column) DefaultValueAsConstant() string {
	if cd.ColumnType == ColTypeTime {
		if cd.DefaultValue == currentTime {
			return `time2.Current`
		} else if cd.DefaultValue == nil {
			return `time2.Zero`
		} else {
			d := cd.DefaultValue.(time.Time)
			if b, _ := d.MarshalText(); b == nil {
				return `time2.Zero`
			} else {
				s := string(b[:])
				return fmt.Sprintf("%#v", s)
			}
		}
	} else if cd.DefaultValue == nil || cd.IsId {
		return cd.ColumnType.DefaultValue()
	} else {
		return fmt.Sprintf("%#v", cd.DefaultValue)
	}
}

// JsonKey returns the key used for the column when outputting JSON.
func (cd *Column) JsonKey() string {
	return cd.modelName
}

// IsReference returns true if the column is a reference to an object in another table.
func (cd *Column) IsReference() bool {
	return cd.ForeignKey != nil && !cd.ForeignKey.IsEnum
}

// IsEnum returns true if the column contains a type defined by a enum table.
func (cd *Column) IsEnum() bool {
	return cd.ForeignKey != nil && cd.ForeignKey.IsEnum
}

// ReferenceFunction returns the function name that should be used to refer to the object
// that is referred to by a forward reference. It is extracted from the name of foreign key.
func (cd *Column) ReferenceFunction() string {
	return cd.referenceFunction
}

// ReferenceJsonKey returns the key that will be used for the referenced object in JSON.
func (cd *Column) ReferenceJsonKey(dd *Model) string {
	return LowerCaseIdentifier(strings.TrimSuffix(cd.DbName, dd.ForeignKeySuffix))
}

// GoType returns the Go variable type corresponding to the column.
func (cd *Column) GoType() string {
	return cd.ColumnType.GoType()
}
